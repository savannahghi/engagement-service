name: Test

on: [push]

env:
  DOCKER_BUILDKIT: 1 # Enable Buildkit and let compose use it to speed up image building
  COMPOSE_DOCKER_CLI_BUILD: 1
  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  PORT: ${{ secrets.PORT }}
  ACCESS_TOKEN: ${{ secrets.ACCESS_TOKEN }}
  GOOGLE_CLOUD_PROJECT: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
  FIREBASE_WEB_API_KEY: ${{ secrets.FIREBASE_WEB_API_KEY }}
  ENVIRONMENT: ${{ secrets.ENVIRONMENT }}
  ROOT_COLLECTION_SUFFIX: ${{ secrets.ROOT_COLLECTION_SUFFIX }}
  JWT_KEY: ${{ secrets.JWT_KEY }}
  HOST: ${{ secrets.HOST }}
  API_SCHEME: ${{ secrets.API_SCHEME }}
  TOKEN_URL: ${{ secrets.TOKEN_URL }}
  AUTH_SERVER_DOMAIN: ${{ secrets.AUTH_SERVER_DOMAIN }}
  GRANT_TYPE: ${{ secrets.GRANT_TYPE }}
  USERNAME: ${{ secrets.USERNAME }}
  PASSWORD: ${{ secrets.PASSWORD }}
  CLIENT_ID: ${{ secrets.CLIENT_ID }}
  CLIENT_SECRET: ${{ secrets.CLIENT_SECRET }}
  AUTH_SERVER_INTROSPECTION_URL: ${{ secrets.AUTH_SERVER_INTROSPECTION_URL }}
  GHOST_CMS_API_ENDPOINT: ${{ secrets.GHOST_CMS_API_ENDPOINT }}
  GHOST_CMS_API_KEY: ${{ secrets.GHOST_CMS_API_KEY }}
  GOOGLE_PROJECT_NUMBER: ${{ secrets.GOOGLE_PROJECT_NUMBER }}
  SERVICE_HOST: ${{ secrets.SERVICE_HOST }}
  MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
  MAILGUN_DOMAIN: ${{ secrets.MAILGUN_DOMAIN }}
  MAILGUN_FROM: ${{ secrets.MAILGUN_FROM }}
  SEND_IN_BLUE_API_KEY: ${{ secrets.SEND_IN_BLUE_API_KEY }}
  SEND_IN_BLUE_ENABLED: ${{ secrets.SEND_IN_BLUE_ENABLED }}
  TWILIO_VIDEO_SID: ${{ secrets.TWILIO_VIDEO_SID }}
  TWILIO_VIDEO_SECRET: ${{ secrets.TWILIO_VIDEO_SECRET }}
  TWILIO_ACCOUNT_SID: ${{ secrets.TWILIO_ACCOUNT_SID }}
  TWILIO_ACCOUNT_AUTH_TOKEN: ${{ secrets.TWILIO_ACCOUNT_AUTH_TOKEN }}
  TWILIO_SMS_NUMBER: ${{ secrets.TWILIO_SMS_NUMBER }}
  SERVER_PUBLIC_DOMAIN: ${{ secrets.SERVER_PUBLIC_DOMAIN }}
  AIT_API_KEY: ${{ secrets.AIT_API_KEY }}
  AIT_USERNAME: ${{ secrets.AIT_USERNAME }}
  AIT_SENDER_ID: ${{ secrets.AIT_SENDER_ID }}
  AIT_ENVIRONMENT: ${{ secrets.AIT_ENVIRONMENT }}
  TWILIO_WHATSAPP_SID: ${{ secrets.TWILIO_WHATSAPP_SID }}
  TWILIO_WHATSAPP_AUTH_TOKEN: ${{ secrets.TWILIO_WHATSAPP_AUTH_TOKEN }}
  TWILIO_WHATSAPP_SENDER: ${{ secrets.TWILIO_WHATSAPP_SENDER }}
  TWILIO_REGION: ${{ secrets.TWILIO_REGION }}
  TWILIO_VIDEO_API_URL: ${{ secrets.TWILIO_VIDEO_API_URL }}
  CHARGE_MASTER_API_HOST: ${{ secrets.CHARGE_MASTER_API_HOST }}
  CHARGE_MASTER_API_SCHEME: ${{ secrets.CHARGE_MASTER_API_SCHEME }}
  CHARGE_MASTER_TOKEN_URL: ${{ secrets.CHARGE_MASTER_TOKEN_URL }}
  CHARGE_MASTER_CLIENT_ID: ${{ secrets.CHARGE_MASTER_CLIENT_ID }}
  CHARGE_MASTER_CLIENT_SECRET: ${{ secrets.CHARGE_MASTER_CLIENT_SECRET }}
  CHARGE_MASTER_USERNAME: ${{ secrets.CHARGE_MASTER_USERNAME }}
  CHARGE_MASTER_PASSWORD: ${{ secrets.CHARGE_MASTER_PASSWORD }}
  CHARGE_MASTER_GRANT_TYPE: ${{ secrets.CHARGE_MASTER_GRANT_TYPE }}
  AIT_BEWELL_API_KEY: ${{ secrets.AIT_BEWELL_API_KEY }}
  AIT_BEWELL_USERNAME: ${{ secrets.AIT_BEWELL_USERNAME }}
  AIT_BEWELL_SENDER_ID: ${{ secrets.AIT_BEWELL_SENDER_ID }}
  TESTING_TWILIO_ACCOUNT_AUTH_TOKEN: ${{ secrets.TESTING_TWILIO_ACCOUNT_AUTH_TOKEN }}
  TESTING_TWILIO_ACCOUNT_SID: ${{ secrets.TESTING_TWILIO_ACCOUNT_SID }}
  TEST_TWILIO_SMS_NUMBER: ${{ secrets.TEST_TWILIO_SMS_NUMBER }}
  HUBSPOT_API_KEY: ${{ secrets.HUBSPOT_API_KEY }}
  HUBSPOT_API_URL: ${{ secrets.HUBSPOT_API_URL }}
  SCHEMA_HOST: ${{ secrets.SCHEMA_HOST }}

concurrency:
  group: lint-and-test

jobs:
  lint_and_test:
    strategy:
      matrix:
        go-version: [1.16.x]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    steps:
      - uses: actions/checkout@v2
      - run: git config --global url."https://${user}:${ACCESS_TOKEN}@gitlab.slade360emr.com".insteadOf "https://gitlab.slade360emr.com"
      - uses: google-github-actions/setup-gcloud@master
        with:
            project_id: ${{ secrets.GOOGLE_CLOUD_PROJECT }}
            service_account_key: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
            export_default_credentials: true
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: ${{ matrix.go-version }}

      - name: Install Go dependencies
        run: |
          curl -sSfL https://raw.githubusercontent.com/golangci/golangci-lint/master/install.sh | sh -s -- -b $(go env GOPATH)/bin v1.37.1
          go get -u github.com/kisielk/errcheck
          go get -u golang.org/x/lint/golint
          go get -u honnef.co/go/tools/cmd/staticcheck
          go get -u github.com/axw/gocov/gocov
          go get -u github.com/securego/gosec/cmd/gosec
          go get -u github.com/ory/go-acc
          go get -u github.com/client9/misspell/cmd/misspell
          go get -u github.com/gordonklaus/ineffassign
          go get github.com/fzipp/gocyclo
          go get github.com/stretchr/testify/assert@v1.7.0
          go get github.com/ory/go-acc

      - name: Run lint and test
        run: |
          staticcheck  ./...
          go fmt $(go list ./... | grep -v /vendor/)
          go vet $(go list ./... | grep -v /vendor/)
          golint -set_exit_status $(go list ./... | grep -v /vendor/)
          errcheck -ignore 'os:.*,' $(go list ./... | grep -v /vendor/)
          misspell -error .
          gosec -exclude=G304,G101 ./...
          go-acc -o coverage.txt --ignore generated,cmd  ./... -- -timeout 60m
          grep -v "generated.go" coverage.txt | grep -v "_gen.go" | grep -v "mocks.go" | grep -v "mock.go" | grep -v "*resolver*go" | grep -v "server.go" > coverage.out
          go tool cover -html=coverage.out -o coverage.html
          gocov convert coverage.out > coverage.json
          gocov report coverage.json > coverage_report.txt
          tail coverage_report.txt
        
      - name: Install goveralls
        env:
          GO111MODULE: off
        run: go get github.com/mattn/goveralls
      - name: Send coverage
        env:
          COVERALLS_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: goveralls -coverprofile=coverage.out  -service=github

  lint_and_test_launch_script:
    strategy:
      matrix:
        python-version: [3.9]
        os: [ubuntu-latest]
    runs-on: ${{ matrix.os }}
    timeout-minutes: 80
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y python3-pip
          pip3 install flake8 pytest
          cd launch
          if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      - name: Lint with flake8
        run: |
          # stop the build if there are Python syntax errors or undefined names
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
      - name: Test with tox
        run: |
          cd launch
          tox -r
scalar Time
scalar Map

enum BooleanFilter {
  TRUE
  FALSE
  BOTH
}

enum Flavour {
  PRO
  CONSUMER
}

enum Keys {
  actions
  nudges
  items
}

# Status of an item or nudge
enum Status {
  PENDING
  IN_PROGRESS
  DONE
}

# Visibility of an item or nudge
enum Visibility {
  SHOW
  HIDE
}

enum ActionType {
  PRIMARY
  SECONDARY
  OVERFLOW
  FLOATING
}

enum Handling {
  INLINE
  FULL_PAGE
}

enum Channel {
  FCM
  EMAIL
  SMS
  WHATSAPP
}

enum LinkType {
  YOUTUBE_VIDEO
  PNG_IMAGE
  PDF_DOCUMENT
  SVG_IMAGE
  DEFAULT
}

enum TextType {
  HTML
  MARKDOWN
  PLAIN
}

# Feed is the top level access point for a user's feed.
type Feed {
  id: String!
  sequenceNumber: Int!
  uid: String!
  flavour: Flavour!
  actions: [Action!]!
  nudges: [Nudge!]!
  items: [Item!]!
  isAnonymous: Boolean!
  featureImage: String
}

type Nudge {
  id: String!
  sequenceNumber: Int!
  visibility: Visibility!
  status: Status!
  expiry: Time
  title: String!
  text: String!
  actions: [Action!]!
  groups: [String]
  users: [String]
  links: [Link]
  notificationChannels: [Channel]
  notificationBody: NotificationBody
}

type Item {
  id: String!
  sequenceNumber: Int!
  expiry: Time!
  persistent: Boolean!
  status: Status!
  visibility: Visibility!
  icon: Link!
  author: String!
  tagline: String!
  label: String!
  timestamp: Time!
  summary: String!
  text: String!
  textType: TextType!
  links: [Link]
  actions: [Action]
  conversations: [Msg]
  users: [String]
  groups: [String]
  notificationChannels: [Channel]
}

type Action {
  id: String!
  sequenceNumber: Int!
  name: String!
  icon: Link!
  actionType: ActionType!
  handling: Handling!
  allowAnonymous: Boolean!
}

type Event {
  id: String!
  name: String!
  context: Context
  payload: Payload
}

input EventInput {
  name: String!
  context: ContextInput!
  payload: PayloadInput!
}

type Context {
  userID: String!
  flavour: Flavour!
  organizationID: String!
  locationID: String!
  timestamp: Time!
}

input ContextInput {
  userID: String!
  organizationID: String!
  locationID: String!
  timestamp: Time!
}

type Payload {
  data: Map
}

input PayloadInput {
  data: Map!
}

type Msg {
  id: String!
  sequenceNumber: Int!
  text: String!
  replyTo: String
  postedByUID: String!
  postedByName: String!
  timestamp: Time!
}

input MsgInput {
  id: String!
  sequenceNumber: Int!
  text: String!
  replyTo: String
  postedByUID: String!
  postedByName: String!
  timestamp: Time!
}

type Link {
  id: String!
  url: String!
  linkType: LinkType!
  title: String!
  description: String!
  thumbnail: String!
}

type FilterParams {
  labels: [String]
}

type NotificationBody {
  publishMessage: String!
  deleteMessage: String!
  resolveMessage: String!
  unresolveMessage: String!
  showMessage: String!
  hideMessage: String!
}

input FilterParamsInput {
  labels: [String]
}

extend type Query {
  getFeed(
    flavour: Flavour!
    playMP4: Boolean!
    isAnonymous: Boolean!
    persistent: BooleanFilter!
    status: Status
    visibility: Visibility
    expired: BooleanFilter
    filterParams: FilterParamsInput
  ): Feed!

  labels(flavour: Flavour!): [String!]!
  unreadPersistentItems(flavour: Flavour!): Int!
}

extend type Mutation {
  resolveFeedItem(flavour: Flavour!, itemID: String!): Item!
  unresolveFeedItem(flavour: Flavour!, itemID: String!): Item!
  pinFeedItem(flavour: Flavour!, itemID: String!): Item!
  unpinFeedItem(flavour: Flavour!, itemID: String!): Item!
  hideFeedItem(flavour: Flavour!, itemID: String!): Item!
  showFeedItem(flavour: Flavour!, itemID: String!): Item!
  hideNudge(flavour: Flavour!, nudgeID: String!): Nudge!
  showNudge(flavour: Flavour!, nudgeID: String!): Nudge!
  postMessage(flavour: Flavour!, itemID: String!, message: MsgInput!): Msg!
  deleteMessage(
    flavour: Flavour!
    itemID: String!
    messageID: String!
  ): Boolean!
  processEvent(flavour: Flavour!, event: EventInput!): Boolean!
}

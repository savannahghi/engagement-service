// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package generated

import (
	"bytes"
	"context"
	"errors"
	"fmt"
	"strconv"
	"sync"
	"sync/atomic"
	"time"

	"github.com/99designs/gqlgen/graphql"
	"github.com/99designs/gqlgen/graphql/introspection"
	"github.com/99designs/gqlgen/plugin/federation/fedruntime"
	"github.com/savannahghi/engagement/pkg/engagement/application/common/dto"
	"github.com/savannahghi/engagement/pkg/engagement/application/common/helpers"
	"github.com/savannahghi/engagement/pkg/engagement/domain"
	"github.com/savannahghi/feedlib"
	"github.com/savannahghi/firebasetools"
	"github.com/savannahghi/profileutils"
	gqlparser "github.com/vektah/gqlparser/v2"
	"github.com/vektah/gqlparser/v2/ast"
	calendar "google.golang.org/api/calendar/v3"
)

// region    ************************** generated!.gotpl **************************

// NewExecutableSchema creates an ExecutableSchema from the ResolverRoot interface.
func NewExecutableSchema(cfg Config) graphql.ExecutableSchema {
	return &executableSchema{
		resolvers:  cfg.Resolvers,
		directives: cfg.Directives,
		complexity: cfg.Complexity,
	}
}

type Config struct {
	Resolvers  ResolverRoot
	Directives DirectiveRoot
	Complexity ComplexityRoot
}

type ResolverRoot interface {
	Dummy() DummyResolver
	Entity() EntityResolver
	Mutation() MutationResolver
	Query() QueryResolver
}

type DirectiveRoot struct {
}

type ComplexityRoot struct {
	AccessToken struct {
		DateUpdated     func(childComplexity int) int
		Duration        func(childComplexity int) int
		JWT             func(childComplexity int) int
		MaxParticipants func(childComplexity int) int
		SID             func(childComplexity int) int
		Status          func(childComplexity int) int
		Type            func(childComplexity int) int
		UniqueName      func(childComplexity int) int
	}

	Action struct {
		ActionType     func(childComplexity int) int
		AllowAnonymous func(childComplexity int) int
		Handling       func(childComplexity int) int
		ID             func(childComplexity int) int
		Icon           func(childComplexity int) int
		Name           func(childComplexity int) int
		SequenceNumber func(childComplexity int) int
	}

	CalendarEvent struct {
		AnyoneCanAddSelf        func(childComplexity int) int
		Attachments             func(childComplexity int) int
		Attendees               func(childComplexity int) int
		AttendeesOmitted        func(childComplexity int) int
		ColorId                 func(childComplexity int) int
		Description             func(childComplexity int) int
		End                     func(childComplexity int) int
		EndTimeUnspecified      func(childComplexity int) int
		Etag                    func(childComplexity int) int
		GuestsCanInviteOthers   func(childComplexity int) int
		GuestsCanModify         func(childComplexity int) int
		GuestsCanSeeOtherGuests func(childComplexity int) int
		HangoutLink             func(childComplexity int) int
		HtmlLink                func(childComplexity int) int
		ICalUID                 func(childComplexity int) int
		Id                      func(childComplexity int) int
		Kind                    func(childComplexity int) int
		Location                func(childComplexity int) int
		Locked                  func(childComplexity int) int
		OriginalStartTime       func(childComplexity int) int
		PrivateCopy             func(childComplexity int) int
		Recurrence              func(childComplexity int) int
		RecurringEventId        func(childComplexity int) int
		Sequence                func(childComplexity int) int
		Start                   func(childComplexity int) int
		Status                  func(childComplexity int) int
		Summary                 func(childComplexity int) int
		Transparency            func(childComplexity int) int
		Updated                 func(childComplexity int) int
		Visibility              func(childComplexity int) int
	}

	Context struct {
		Flavour        func(childComplexity int) int
		LocationID     func(childComplexity int) int
		OrganizationID func(childComplexity int) int
		Timestamp      func(childComplexity int) int
		UserID         func(childComplexity int) int
	}

	Dummy struct {
		ID func(childComplexity int) int
	}

	Entity struct {
		FindAccessTokenByJwt      func(childComplexity int, jwt string) int
		FindDummyByID             func(childComplexity int, id *string) int
		FindFeedByID              func(childComplexity int, id string) int
		FindSavedNotificationByID func(childComplexity int, id string) int
	}

	Event struct {
		Context func(childComplexity int) int
		ID      func(childComplexity int) int
		Name    func(childComplexity int) int
		Payload func(childComplexity int) int
	}

	EventAttachment struct {
		FileId   func(childComplexity int) int
		FileUrl  func(childComplexity int) int
		IconLink func(childComplexity int) int
		MimeType func(childComplexity int) int
		Title    func(childComplexity int) int
	}

	EventAttendee struct {
		AdditionalGuests func(childComplexity int) int
		Comment          func(childComplexity int) int
		DisplayName      func(childComplexity int) int
		Email            func(childComplexity int) int
		Id               func(childComplexity int) int
		Optional         func(childComplexity int) int
		Organizer        func(childComplexity int) int
		Resource         func(childComplexity int) int
		ResponseStatus   func(childComplexity int) int
		Self             func(childComplexity int) int
	}

	EventDateTime struct {
		Date     func(childComplexity int) int
		DateTime func(childComplexity int) int
		TimeZone func(childComplexity int) int
	}

	Feed struct {
		Actions        func(childComplexity int) int
		Flavour        func(childComplexity int) int
		ID             func(childComplexity int) int
		IsAnonymous    func(childComplexity int) int
		Items          func(childComplexity int) int
		Nudges         func(childComplexity int) int
		SequenceNumber func(childComplexity int) int
		UID            func(childComplexity int) int
	}

	Feedback struct {
		Answer   func(childComplexity int) int
		Question func(childComplexity int) int
	}

	FilterParams struct {
		Labels func(childComplexity int) int
	}

	FirebaseAPNSConfig struct {
		Headers func(childComplexity int) int
	}

	FirebaseAndroidConfig struct {
		CollapseKey           func(childComplexity int) int
		Data                  func(childComplexity int) int
		Priority              func(childComplexity int) int
		RestrictedPackageName func(childComplexity int) int
	}

	FirebaseSimpleNotification struct {
		Body     func(childComplexity int) int
		Data     func(childComplexity int) int
		ImageURL func(childComplexity int) int
		Title    func(childComplexity int) int
	}

	FirebaseWebpushConfig struct {
		Data    func(childComplexity int) int
		Headers func(childComplexity int) int
	}

	GhostCMSAuthor struct {
		Facebook     func(childComplexity int) int
		ID           func(childComplexity int) int
		Location     func(childComplexity int) int
		Name         func(childComplexity int) int
		ProfileImage func(childComplexity int) int
		Slug         func(childComplexity int) int
		Twitter      func(childComplexity int) int
		URL          func(childComplexity int) int
		Website      func(childComplexity int) int
	}

	GhostCMSPost struct {
		CommentID    func(childComplexity int) int
		CreatedAt    func(childComplexity int) int
		Excerpt      func(childComplexity int) int
		FeatureImage func(childComplexity int) int
		HTML         func(childComplexity int) int
		ID           func(childComplexity int) int
		PublishedAt  func(childComplexity int) int
		ReadingTime  func(childComplexity int) int
		Slug         func(childComplexity int) int
		Tags         func(childComplexity int) int
		Title        func(childComplexity int) int
		URL          func(childComplexity int) int
		UUID         func(childComplexity int) int
		UpdatedAt    func(childComplexity int) int
	}

	GhostCMSTag struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		Name        func(childComplexity int) int
		Slug        func(childComplexity int) int
		URL         func(childComplexity int) int
		Visibility  func(childComplexity int) int
	}

	Item struct {
		Actions              func(childComplexity int) int
		Author               func(childComplexity int) int
		Conversations        func(childComplexity int) int
		Expiry               func(childComplexity int) int
		Groups               func(childComplexity int) int
		ID                   func(childComplexity int) int
		Icon                 func(childComplexity int) int
		Label                func(childComplexity int) int
		Links                func(childComplexity int) int
		NotificationChannels func(childComplexity int) int
		Persistent           func(childComplexity int) int
		SequenceNumber       func(childComplexity int) int
		Status               func(childComplexity int) int
		Summary              func(childComplexity int) int
		Tagline              func(childComplexity int) int
		Text                 func(childComplexity int) int
		TextType             func(childComplexity int) int
		Timestamp            func(childComplexity int) int
		Users                func(childComplexity int) int
		Visibility           func(childComplexity int) int
	}

	Link struct {
		Description func(childComplexity int) int
		ID          func(childComplexity int) int
		LinkType    func(childComplexity int) int
		Thumbnail   func(childComplexity int) int
		Title       func(childComplexity int) int
		URL         func(childComplexity int) int
	}

	Msg struct {
		ID             func(childComplexity int) int
		PostedByName   func(childComplexity int) int
		PostedByUID    func(childComplexity int) int
		ReplyTo        func(childComplexity int) int
		SequenceNumber func(childComplexity int) int
		Text           func(childComplexity int) int
		Timestamp      func(childComplexity int) int
	}

	Mutation struct {
		BillNotification                func(childComplexity int, to string, productName string, billingPeriod string, billAmount string, paymentInstruction string, marketingMessage string) int
		ClaimNotification               func(childComplexity int, to string, claimReference string, claimTypeParenthesized string, provider string, visitType string, claimTime string, marketingMessage string) int
		DeleteMessage                   func(childComplexity int, flavour feedlib.Flavour, itemID string, messageID string) int
		HideFeedItem                    func(childComplexity int, flavour feedlib.Flavour, itemID string) int
		HideNudge                       func(childComplexity int, flavour feedlib.Flavour, nudgeID string) int
		PhoneNumberVerificationCode     func(childComplexity int, to string, code string, marketingMessage string) int
		PinFeedItem                     func(childComplexity int, flavour feedlib.Flavour, itemID string) int
		PostMessage                     func(childComplexity int, flavour feedlib.Flavour, itemID string, message feedlib.Message) int
		PreauthApproval                 func(childComplexity int, to string, currency string, amount string, benefit string, provider string, member string, careContact string, marketingMessage string) int
		PreauthRequest                  func(childComplexity int, to string, currency string, amount string, benefit string, provider string, requestTime string, member string, careContact string, marketingMessage string) int
		ProcessEvent                    func(childComplexity int, flavour feedlib.Flavour, event feedlib.Event) int
		RecordNPSResponse               func(childComplexity int, input dto.NPSInput) int
		ResolveFeedItem                 func(childComplexity int, flavour feedlib.Flavour, itemID string) int
		Send                            func(childComplexity int, to string, message string) int
		SendFCMByPhoneOrEmail           func(childComplexity int, phoneNumber *string, email *string, data map[string]interface{}, notification firebasetools.FirebaseSimpleNotificationInput, android *firebasetools.FirebaseAndroidConfigInput, ios *firebasetools.FirebaseAPNSConfigInput, web *firebasetools.FirebaseWebpushConfigInput) int
		SendNotification                func(childComplexity int, registrationTokens []string, data map[string]interface{}, notification firebasetools.FirebaseSimpleNotificationInput, android *firebasetools.FirebaseAndroidConfigInput, ios *firebasetools.FirebaseAPNSConfigInput, web *firebasetools.FirebaseWebpushConfigInput) int
		SendToMany                      func(childComplexity int, message string, to []string) int
		ShowFeedItem                    func(childComplexity int, flavour feedlib.Flavour, itemID string) int
		ShowNudge                       func(childComplexity int, flavour feedlib.Flavour, nudgeID string) int
		SimpleEmail                     func(childComplexity int, subject string, text string, to []string) int
		SladeOtp                        func(childComplexity int, to string, name string, otp string, marketingMessage string) int
		TestFeature                     func(childComplexity int) int
		UnpinFeedItem                   func(childComplexity int, flavour feedlib.Flavour, itemID string) int
		UnresolveFeedItem               func(childComplexity int, flavour feedlib.Flavour, itemID string) int
		Upload                          func(childComplexity int, input profileutils.UploadInput) int
		VerifyEmailOtp                  func(childComplexity int, email string, otp string) int
		VerifyOtp                       func(childComplexity int, msisdn string, otp string) int
		VirtualCards                    func(childComplexity int, to string, wellnessCardFamily string, virtualCardLink string, marketingMessage string) int
		VisitStart                      func(childComplexity int, to string, memberName string, benefitName string, locationName string, startTime string, balance string, marketingMessage string) int
		WellnessCardActivationDependant func(childComplexity int, to string, memberName string, cardName string, marketingMessage string) int
		WellnessCardActivationPrincipal func(childComplexity int, to string, memberName string, cardName string, minorAgeThreshold string, marketingMessage string) int
	}

	NPSResponse struct {
		Email     func(childComplexity int) int
		Feedback  func(childComplexity int) int
		ID        func(childComplexity int) int
		MSISDN    func(childComplexity int) int
		Name      func(childComplexity int) int
		Score     func(childComplexity int) int
		SladeCode func(childComplexity int) int
	}

	NotificationBody struct {
		DeleteMessage    func(childComplexity int) int
		HideMessage      func(childComplexity int) int
		PublishMessage   func(childComplexity int) int
		ResolveMessage   func(childComplexity int) int
		ShowMessage      func(childComplexity int) int
		UnresolveMessage func(childComplexity int) int
	}

	Nudge struct {
		Actions              func(childComplexity int) int
		Expiry               func(childComplexity int) int
		Groups               func(childComplexity int) int
		ID                   func(childComplexity int) int
		Links                func(childComplexity int) int
		NotificationBody     func(childComplexity int) int
		NotificationChannels func(childComplexity int) int
		SequenceNumber       func(childComplexity int) int
		Status               func(childComplexity int) int
		Text                 func(childComplexity int) int
		Title                func(childComplexity int) int
		Users                func(childComplexity int) int
		Visibility           func(childComplexity int) int
	}

	Payload struct {
		Data func(childComplexity int) int
	}

	Query struct {
		EmailVerificationOtp  func(childComplexity int, email string) int
		FindUploadByID        func(childComplexity int, id string) int
		GenerateAndEmailOtp   func(childComplexity int, msisdn string, email *string, appID *string) int
		GenerateOtp           func(childComplexity int, msisdn string, appID *string) int
		GenerateRetryOtp      func(childComplexity int, msisdn string, retryStep int, appID *string) int
		GetFaqsContent        func(childComplexity int, flavour feedlib.Flavour) int
		GetFeed               func(childComplexity int, flavour feedlib.Flavour, isAnonymous bool, persistent feedlib.BooleanFilter, status *feedlib.Status, visibility *feedlib.Visibility, expired *feedlib.BooleanFilter, filterParams *helpers.FilterParams) int
		GetLibraryContent     func(childComplexity int) int
		Labels                func(childComplexity int, flavour feedlib.Flavour) int
		ListNPSResponse       func(childComplexity int) int
		Notifications         func(childComplexity int, registrationToken string, newerThan time.Time, limit int) int
		TwilioAccessToken     func(childComplexity int) int
		UnreadPersistentItems func(childComplexity int, flavour feedlib.Flavour) int
		__resolve__service    func(childComplexity int) int
		__resolve_entities    func(childComplexity int, representations []map[string]interface{}) int
	}

	Recipient struct {
		Cost      func(childComplexity int) int
		MessageID func(childComplexity int) int
		Number    func(childComplexity int) int
		Status    func(childComplexity int) int
	}

	Sms struct {
		Recipients func(childComplexity int) int
	}

	SavedNotification struct {
		APNSConfig        func(childComplexity int) int
		AndroidConfig     func(childComplexity int) int
		Data              func(childComplexity int) int
		ID                func(childComplexity int) int
		MessageID         func(childComplexity int) int
		Notification      func(childComplexity int) int
		RegistrationToken func(childComplexity int) int
		Timestamp         func(childComplexity int) int
		WebpushConfig     func(childComplexity int) int
	}

	SendMessageResponse struct {
		SMSMessageData func(childComplexity int) int
	}

	Upload struct {
		Base64data  func(childComplexity int) int
		ContentType func(childComplexity int) int
		Creation    func(childComplexity int) int
		Hash        func(childComplexity int) int
		ID          func(childComplexity int) int
		Language    func(childComplexity int) int
		Size        func(childComplexity int) int
		Title       func(childComplexity int) int
		URL         func(childComplexity int) int
	}

	Service struct {
		SDL func(childComplexity int) int
	}
}

type DummyResolver interface {
	ID(ctx context.Context, obj *dto.Dummy) (*string, error)
}
type EntityResolver interface {
	FindAccessTokenByJwt(ctx context.Context, jwt string) (*dto.AccessToken, error)
	FindDummyByID(ctx context.Context, id *string) (*dto.Dummy, error)
	FindFeedByID(ctx context.Context, id string) (*domain.Feed, error)
	FindSavedNotificationByID(ctx context.Context, id string) (*dto.SavedNotification, error)
}
type MutationResolver interface {
	TestFeature(ctx context.Context) (bool, error)
	SendNotification(ctx context.Context, registrationTokens []string, data map[string]interface{}, notification firebasetools.FirebaseSimpleNotificationInput, android *firebasetools.FirebaseAndroidConfigInput, ios *firebasetools.FirebaseAPNSConfigInput, web *firebasetools.FirebaseWebpushConfigInput) (bool, error)
	SendFCMByPhoneOrEmail(ctx context.Context, phoneNumber *string, email *string, data map[string]interface{}, notification firebasetools.FirebaseSimpleNotificationInput, android *firebasetools.FirebaseAndroidConfigInput, ios *firebasetools.FirebaseAPNSConfigInput, web *firebasetools.FirebaseWebpushConfigInput) (bool, error)
	ResolveFeedItem(ctx context.Context, flavour feedlib.Flavour, itemID string) (*feedlib.Item, error)
	UnresolveFeedItem(ctx context.Context, flavour feedlib.Flavour, itemID string) (*feedlib.Item, error)
	PinFeedItem(ctx context.Context, flavour feedlib.Flavour, itemID string) (*feedlib.Item, error)
	UnpinFeedItem(ctx context.Context, flavour feedlib.Flavour, itemID string) (*feedlib.Item, error)
	HideFeedItem(ctx context.Context, flavour feedlib.Flavour, itemID string) (*feedlib.Item, error)
	ShowFeedItem(ctx context.Context, flavour feedlib.Flavour, itemID string) (*feedlib.Item, error)
	HideNudge(ctx context.Context, flavour feedlib.Flavour, nudgeID string) (*feedlib.Nudge, error)
	ShowNudge(ctx context.Context, flavour feedlib.Flavour, nudgeID string) (*feedlib.Nudge, error)
	PostMessage(ctx context.Context, flavour feedlib.Flavour, itemID string, message feedlib.Message) (*feedlib.Message, error)
	DeleteMessage(ctx context.Context, flavour feedlib.Flavour, itemID string, messageID string) (bool, error)
	ProcessEvent(ctx context.Context, flavour feedlib.Flavour, event feedlib.Event) (bool, error)
	SimpleEmail(ctx context.Context, subject string, text string, to []string) (string, error)
	VerifyOtp(ctx context.Context, msisdn string, otp string) (bool, error)
	VerifyEmailOtp(ctx context.Context, email string, otp string) (bool, error)
	Send(ctx context.Context, to string, message string) (*dto.SendMessageResponse, error)
	SendToMany(ctx context.Context, message string, to []string) (*dto.SendMessageResponse, error)
	RecordNPSResponse(ctx context.Context, input dto.NPSInput) (bool, error)
	Upload(ctx context.Context, input profileutils.UploadInput) (*profileutils.Upload, error)
	PhoneNumberVerificationCode(ctx context.Context, to string, code string, marketingMessage string) (bool, error)
	WellnessCardActivationDependant(ctx context.Context, to string, memberName string, cardName string, marketingMessage string) (bool, error)
	WellnessCardActivationPrincipal(ctx context.Context, to string, memberName string, cardName string, minorAgeThreshold string, marketingMessage string) (bool, error)
	BillNotification(ctx context.Context, to string, productName string, billingPeriod string, billAmount string, paymentInstruction string, marketingMessage string) (bool, error)
	VirtualCards(ctx context.Context, to string, wellnessCardFamily string, virtualCardLink string, marketingMessage string) (bool, error)
	VisitStart(ctx context.Context, to string, memberName string, benefitName string, locationName string, startTime string, balance string, marketingMessage string) (bool, error)
	ClaimNotification(ctx context.Context, to string, claimReference string, claimTypeParenthesized string, provider string, visitType string, claimTime string, marketingMessage string) (bool, error)
	PreauthApproval(ctx context.Context, to string, currency string, amount string, benefit string, provider string, member string, careContact string, marketingMessage string) (bool, error)
	PreauthRequest(ctx context.Context, to string, currency string, amount string, benefit string, provider string, requestTime string, member string, careContact string, marketingMessage string) (bool, error)
	SladeOtp(ctx context.Context, to string, name string, otp string, marketingMessage string) (bool, error)
}
type QueryResolver interface {
	GetLibraryContent(ctx context.Context) ([]*domain.GhostCMSPost, error)
	GetFaqsContent(ctx context.Context, flavour feedlib.Flavour) ([]*domain.GhostCMSPost, error)
	Notifications(ctx context.Context, registrationToken string, newerThan time.Time, limit int) ([]*dto.SavedNotification, error)
	GetFeed(ctx context.Context, flavour feedlib.Flavour, isAnonymous bool, persistent feedlib.BooleanFilter, status *feedlib.Status, visibility *feedlib.Visibility, expired *feedlib.BooleanFilter, filterParams *helpers.FilterParams) (*domain.Feed, error)
	Labels(ctx context.Context, flavour feedlib.Flavour) ([]string, error)
	UnreadPersistentItems(ctx context.Context, flavour feedlib.Flavour) (int, error)
	GenerateOtp(ctx context.Context, msisdn string, appID *string) (string, error)
	GenerateAndEmailOtp(ctx context.Context, msisdn string, email *string, appID *string) (string, error)
	GenerateRetryOtp(ctx context.Context, msisdn string, retryStep int, appID *string) (string, error)
	EmailVerificationOtp(ctx context.Context, email string) (string, error)
	ListNPSResponse(ctx context.Context) ([]*dto.NPSResponse, error)
	TwilioAccessToken(ctx context.Context) (*dto.AccessToken, error)
	FindUploadByID(ctx context.Context, id string) (*profileutils.Upload, error)
}

type executableSchema struct {
	resolvers  ResolverRoot
	directives DirectiveRoot
	complexity ComplexityRoot
}

func (e *executableSchema) Schema() *ast.Schema {
	return parsedSchema
}

func (e *executableSchema) Complexity(typeName, field string, childComplexity int, rawArgs map[string]interface{}) (int, bool) {
	ec := executionContext{nil, e}
	_ = ec
	switch typeName + "." + field {

	case "AccessToken.dateUpdated":
		if e.complexity.AccessToken.DateUpdated == nil {
			break
		}

		return e.complexity.AccessToken.DateUpdated(childComplexity), true

	case "AccessToken.duration":
		if e.complexity.AccessToken.Duration == nil {
			break
		}

		return e.complexity.AccessToken.Duration(childComplexity), true

	case "AccessToken.jwt":
		if e.complexity.AccessToken.JWT == nil {
			break
		}

		return e.complexity.AccessToken.JWT(childComplexity), true

	case "AccessToken.maxParticipants":
		if e.complexity.AccessToken.MaxParticipants == nil {
			break
		}

		return e.complexity.AccessToken.MaxParticipants(childComplexity), true

	case "AccessToken.sid":
		if e.complexity.AccessToken.SID == nil {
			break
		}

		return e.complexity.AccessToken.SID(childComplexity), true

	case "AccessToken.status":
		if e.complexity.AccessToken.Status == nil {
			break
		}

		return e.complexity.AccessToken.Status(childComplexity), true

	case "AccessToken.type":
		if e.complexity.AccessToken.Type == nil {
			break
		}

		return e.complexity.AccessToken.Type(childComplexity), true

	case "AccessToken.uniqueName":
		if e.complexity.AccessToken.UniqueName == nil {
			break
		}

		return e.complexity.AccessToken.UniqueName(childComplexity), true

	case "Action.actionType":
		if e.complexity.Action.ActionType == nil {
			break
		}

		return e.complexity.Action.ActionType(childComplexity), true

	case "Action.allowAnonymous":
		if e.complexity.Action.AllowAnonymous == nil {
			break
		}

		return e.complexity.Action.AllowAnonymous(childComplexity), true

	case "Action.handling":
		if e.complexity.Action.Handling == nil {
			break
		}

		return e.complexity.Action.Handling(childComplexity), true

	case "Action.id":
		if e.complexity.Action.ID == nil {
			break
		}

		return e.complexity.Action.ID(childComplexity), true

	case "Action.icon":
		if e.complexity.Action.Icon == nil {
			break
		}

		return e.complexity.Action.Icon(childComplexity), true

	case "Action.name":
		if e.complexity.Action.Name == nil {
			break
		}

		return e.complexity.Action.Name(childComplexity), true

	case "Action.sequenceNumber":
		if e.complexity.Action.SequenceNumber == nil {
			break
		}

		return e.complexity.Action.SequenceNumber(childComplexity), true

	case "CalendarEvent.anyoneCanAddSelf":
		if e.complexity.CalendarEvent.AnyoneCanAddSelf == nil {
			break
		}

		return e.complexity.CalendarEvent.AnyoneCanAddSelf(childComplexity), true

	case "CalendarEvent.attachments":
		if e.complexity.CalendarEvent.Attachments == nil {
			break
		}

		return e.complexity.CalendarEvent.Attachments(childComplexity), true

	case "CalendarEvent.attendees":
		if e.complexity.CalendarEvent.Attendees == nil {
			break
		}

		return e.complexity.CalendarEvent.Attendees(childComplexity), true

	case "CalendarEvent.attendeesOmitted":
		if e.complexity.CalendarEvent.AttendeesOmitted == nil {
			break
		}

		return e.complexity.CalendarEvent.AttendeesOmitted(childComplexity), true

	case "CalendarEvent.colorId":
		if e.complexity.CalendarEvent.ColorId == nil {
			break
		}

		return e.complexity.CalendarEvent.ColorId(childComplexity), true

	case "CalendarEvent.description":
		if e.complexity.CalendarEvent.Description == nil {
			break
		}

		return e.complexity.CalendarEvent.Description(childComplexity), true

	case "CalendarEvent.end":
		if e.complexity.CalendarEvent.End == nil {
			break
		}

		return e.complexity.CalendarEvent.End(childComplexity), true

	case "CalendarEvent.endTimeUnspecified":
		if e.complexity.CalendarEvent.EndTimeUnspecified == nil {
			break
		}

		return e.complexity.CalendarEvent.EndTimeUnspecified(childComplexity), true

	case "CalendarEvent.etag":
		if e.complexity.CalendarEvent.Etag == nil {
			break
		}

		return e.complexity.CalendarEvent.Etag(childComplexity), true

	case "CalendarEvent.guestsCanInviteOthers":
		if e.complexity.CalendarEvent.GuestsCanInviteOthers == nil {
			break
		}

		return e.complexity.CalendarEvent.GuestsCanInviteOthers(childComplexity), true

	case "CalendarEvent.guestsCanModify":
		if e.complexity.CalendarEvent.GuestsCanModify == nil {
			break
		}

		return e.complexity.CalendarEvent.GuestsCanModify(childComplexity), true

	case "CalendarEvent.guestsCanSeeOtherGuests":
		if e.complexity.CalendarEvent.GuestsCanSeeOtherGuests == nil {
			break
		}

		return e.complexity.CalendarEvent.GuestsCanSeeOtherGuests(childComplexity), true

	case "CalendarEvent.hangoutLink":
		if e.complexity.CalendarEvent.HangoutLink == nil {
			break
		}

		return e.complexity.CalendarEvent.HangoutLink(childComplexity), true

	case "CalendarEvent.htmlLink":
		if e.complexity.CalendarEvent.HtmlLink == nil {
			break
		}

		return e.complexity.CalendarEvent.HtmlLink(childComplexity), true

	case "CalendarEvent.iCalUID":
		if e.complexity.CalendarEvent.ICalUID == nil {
			break
		}

		return e.complexity.CalendarEvent.ICalUID(childComplexity), true

	case "CalendarEvent.id":
		if e.complexity.CalendarEvent.Id == nil {
			break
		}

		return e.complexity.CalendarEvent.Id(childComplexity), true

	case "CalendarEvent.kind":
		if e.complexity.CalendarEvent.Kind == nil {
			break
		}

		return e.complexity.CalendarEvent.Kind(childComplexity), true

	case "CalendarEvent.location":
		if e.complexity.CalendarEvent.Location == nil {
			break
		}

		return e.complexity.CalendarEvent.Location(childComplexity), true

	case "CalendarEvent.locked":
		if e.complexity.CalendarEvent.Locked == nil {
			break
		}

		return e.complexity.CalendarEvent.Locked(childComplexity), true

	case "CalendarEvent.originalStartTime":
		if e.complexity.CalendarEvent.OriginalStartTime == nil {
			break
		}

		return e.complexity.CalendarEvent.OriginalStartTime(childComplexity), true

	case "CalendarEvent.privateCopy":
		if e.complexity.CalendarEvent.PrivateCopy == nil {
			break
		}

		return e.complexity.CalendarEvent.PrivateCopy(childComplexity), true

	case "CalendarEvent.recurrence":
		if e.complexity.CalendarEvent.Recurrence == nil {
			break
		}

		return e.complexity.CalendarEvent.Recurrence(childComplexity), true

	case "CalendarEvent.recurringEventId":
		if e.complexity.CalendarEvent.RecurringEventId == nil {
			break
		}

		return e.complexity.CalendarEvent.RecurringEventId(childComplexity), true

	case "CalendarEvent.sequence":
		if e.complexity.CalendarEvent.Sequence == nil {
			break
		}

		return e.complexity.CalendarEvent.Sequence(childComplexity), true

	case "CalendarEvent.start":
		if e.complexity.CalendarEvent.Start == nil {
			break
		}

		return e.complexity.CalendarEvent.Start(childComplexity), true

	case "CalendarEvent.status":
		if e.complexity.CalendarEvent.Status == nil {
			break
		}

		return e.complexity.CalendarEvent.Status(childComplexity), true

	case "CalendarEvent.summary":
		if e.complexity.CalendarEvent.Summary == nil {
			break
		}

		return e.complexity.CalendarEvent.Summary(childComplexity), true

	case "CalendarEvent.transparency":
		if e.complexity.CalendarEvent.Transparency == nil {
			break
		}

		return e.complexity.CalendarEvent.Transparency(childComplexity), true

	case "CalendarEvent.updated":
		if e.complexity.CalendarEvent.Updated == nil {
			break
		}

		return e.complexity.CalendarEvent.Updated(childComplexity), true

	case "CalendarEvent.visibility":
		if e.complexity.CalendarEvent.Visibility == nil {
			break
		}

		return e.complexity.CalendarEvent.Visibility(childComplexity), true

	case "Context.flavour":
		if e.complexity.Context.Flavour == nil {
			break
		}

		return e.complexity.Context.Flavour(childComplexity), true

	case "Context.locationID":
		if e.complexity.Context.LocationID == nil {
			break
		}

		return e.complexity.Context.LocationID(childComplexity), true

	case "Context.organizationID":
		if e.complexity.Context.OrganizationID == nil {
			break
		}

		return e.complexity.Context.OrganizationID(childComplexity), true

	case "Context.timestamp":
		if e.complexity.Context.Timestamp == nil {
			break
		}

		return e.complexity.Context.Timestamp(childComplexity), true

	case "Context.userID":
		if e.complexity.Context.UserID == nil {
			break
		}

		return e.complexity.Context.UserID(childComplexity), true

	case "Dummy.id":
		if e.complexity.Dummy.ID == nil {
			break
		}

		return e.complexity.Dummy.ID(childComplexity), true

	case "Entity.findAccessTokenByJwt":
		if e.complexity.Entity.FindAccessTokenByJwt == nil {
			break
		}

		args, err := ec.field_Entity_findAccessTokenByJwt_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindAccessTokenByJwt(childComplexity, args["jwt"].(string)), true

	case "Entity.findDummyByID":
		if e.complexity.Entity.FindDummyByID == nil {
			break
		}

		args, err := ec.field_Entity_findDummyByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindDummyByID(childComplexity, args["id"].(*string)), true

	case "Entity.findFeedByID":
		if e.complexity.Entity.FindFeedByID == nil {
			break
		}

		args, err := ec.field_Entity_findFeedByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindFeedByID(childComplexity, args["id"].(string)), true

	case "Entity.findSavedNotificationByID":
		if e.complexity.Entity.FindSavedNotificationByID == nil {
			break
		}

		args, err := ec.field_Entity_findSavedNotificationByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Entity.FindSavedNotificationByID(childComplexity, args["id"].(string)), true

	case "Event.context":
		if e.complexity.Event.Context == nil {
			break
		}

		return e.complexity.Event.Context(childComplexity), true

	case "Event.id":
		if e.complexity.Event.ID == nil {
			break
		}

		return e.complexity.Event.ID(childComplexity), true

	case "Event.name":
		if e.complexity.Event.Name == nil {
			break
		}

		return e.complexity.Event.Name(childComplexity), true

	case "Event.payload":
		if e.complexity.Event.Payload == nil {
			break
		}

		return e.complexity.Event.Payload(childComplexity), true

	case "EventAttachment.fileID":
		if e.complexity.EventAttachment.FileId == nil {
			break
		}

		return e.complexity.EventAttachment.FileId(childComplexity), true

	case "EventAttachment.fileURL":
		if e.complexity.EventAttachment.FileUrl == nil {
			break
		}

		return e.complexity.EventAttachment.FileUrl(childComplexity), true

	case "EventAttachment.iconLink":
		if e.complexity.EventAttachment.IconLink == nil {
			break
		}

		return e.complexity.EventAttachment.IconLink(childComplexity), true

	case "EventAttachment.mimeType":
		if e.complexity.EventAttachment.MimeType == nil {
			break
		}

		return e.complexity.EventAttachment.MimeType(childComplexity), true

	case "EventAttachment.title":
		if e.complexity.EventAttachment.Title == nil {
			break
		}

		return e.complexity.EventAttachment.Title(childComplexity), true

	case "EventAttendee.additionalGuests":
		if e.complexity.EventAttendee.AdditionalGuests == nil {
			break
		}

		return e.complexity.EventAttendee.AdditionalGuests(childComplexity), true

	case "EventAttendee.comment":
		if e.complexity.EventAttendee.Comment == nil {
			break
		}

		return e.complexity.EventAttendee.Comment(childComplexity), true

	case "EventAttendee.displayName":
		if e.complexity.EventAttendee.DisplayName == nil {
			break
		}

		return e.complexity.EventAttendee.DisplayName(childComplexity), true

	case "EventAttendee.email":
		if e.complexity.EventAttendee.Email == nil {
			break
		}

		return e.complexity.EventAttendee.Email(childComplexity), true

	case "EventAttendee.id":
		if e.complexity.EventAttendee.Id == nil {
			break
		}

		return e.complexity.EventAttendee.Id(childComplexity), true

	case "EventAttendee.optional":
		if e.complexity.EventAttendee.Optional == nil {
			break
		}

		return e.complexity.EventAttendee.Optional(childComplexity), true

	case "EventAttendee.organizer":
		if e.complexity.EventAttendee.Organizer == nil {
			break
		}

		return e.complexity.EventAttendee.Organizer(childComplexity), true

	case "EventAttendee.resource":
		if e.complexity.EventAttendee.Resource == nil {
			break
		}

		return e.complexity.EventAttendee.Resource(childComplexity), true

	case "EventAttendee.responseStatus":
		if e.complexity.EventAttendee.ResponseStatus == nil {
			break
		}

		return e.complexity.EventAttendee.ResponseStatus(childComplexity), true

	case "EventAttendee.self":
		if e.complexity.EventAttendee.Self == nil {
			break
		}

		return e.complexity.EventAttendee.Self(childComplexity), true

	case "EventDateTime.date":
		if e.complexity.EventDateTime.Date == nil {
			break
		}

		return e.complexity.EventDateTime.Date(childComplexity), true

	case "EventDateTime.dateTime":
		if e.complexity.EventDateTime.DateTime == nil {
			break
		}

		return e.complexity.EventDateTime.DateTime(childComplexity), true

	case "EventDateTime.timeZone":
		if e.complexity.EventDateTime.TimeZone == nil {
			break
		}

		return e.complexity.EventDateTime.TimeZone(childComplexity), true

	case "Feed.actions":
		if e.complexity.Feed.Actions == nil {
			break
		}

		return e.complexity.Feed.Actions(childComplexity), true

	case "Feed.flavour":
		if e.complexity.Feed.Flavour == nil {
			break
		}

		return e.complexity.Feed.Flavour(childComplexity), true

	case "Feed.id":
		if e.complexity.Feed.ID == nil {
			break
		}

		return e.complexity.Feed.ID(childComplexity), true

	case "Feed.isAnonymous":
		if e.complexity.Feed.IsAnonymous == nil {
			break
		}

		return e.complexity.Feed.IsAnonymous(childComplexity), true

	case "Feed.items":
		if e.complexity.Feed.Items == nil {
			break
		}

		return e.complexity.Feed.Items(childComplexity), true

	case "Feed.nudges":
		if e.complexity.Feed.Nudges == nil {
			break
		}

		return e.complexity.Feed.Nudges(childComplexity), true

	case "Feed.sequenceNumber":
		if e.complexity.Feed.SequenceNumber == nil {
			break
		}

		return e.complexity.Feed.SequenceNumber(childComplexity), true

	case "Feed.uid":
		if e.complexity.Feed.UID == nil {
			break
		}

		return e.complexity.Feed.UID(childComplexity), true

	case "Feedback.answer":
		if e.complexity.Feedback.Answer == nil {
			break
		}

		return e.complexity.Feedback.Answer(childComplexity), true

	case "Feedback.question":
		if e.complexity.Feedback.Question == nil {
			break
		}

		return e.complexity.Feedback.Question(childComplexity), true

	case "FilterParams.labels":
		if e.complexity.FilterParams.Labels == nil {
			break
		}

		return e.complexity.FilterParams.Labels(childComplexity), true

	case "FirebaseAPNSConfig.headers":
		if e.complexity.FirebaseAPNSConfig.Headers == nil {
			break
		}

		return e.complexity.FirebaseAPNSConfig.Headers(childComplexity), true

	case "FirebaseAndroidConfig.collapseKey":
		if e.complexity.FirebaseAndroidConfig.CollapseKey == nil {
			break
		}

		return e.complexity.FirebaseAndroidConfig.CollapseKey(childComplexity), true

	case "FirebaseAndroidConfig.data":
		if e.complexity.FirebaseAndroidConfig.Data == nil {
			break
		}

		return e.complexity.FirebaseAndroidConfig.Data(childComplexity), true

	case "FirebaseAndroidConfig.priority":
		if e.complexity.FirebaseAndroidConfig.Priority == nil {
			break
		}

		return e.complexity.FirebaseAndroidConfig.Priority(childComplexity), true

	case "FirebaseAndroidConfig.restrictedPackageName":
		if e.complexity.FirebaseAndroidConfig.RestrictedPackageName == nil {
			break
		}

		return e.complexity.FirebaseAndroidConfig.RestrictedPackageName(childComplexity), true

	case "FirebaseSimpleNotification.body":
		if e.complexity.FirebaseSimpleNotification.Body == nil {
			break
		}

		return e.complexity.FirebaseSimpleNotification.Body(childComplexity), true

	case "FirebaseSimpleNotification.data":
		if e.complexity.FirebaseSimpleNotification.Data == nil {
			break
		}

		return e.complexity.FirebaseSimpleNotification.Data(childComplexity), true

	case "FirebaseSimpleNotification.imageURL":
		if e.complexity.FirebaseSimpleNotification.ImageURL == nil {
			break
		}

		return e.complexity.FirebaseSimpleNotification.ImageURL(childComplexity), true

	case "FirebaseSimpleNotification.title":
		if e.complexity.FirebaseSimpleNotification.Title == nil {
			break
		}

		return e.complexity.FirebaseSimpleNotification.Title(childComplexity), true

	case "FirebaseWebpushConfig.data":
		if e.complexity.FirebaseWebpushConfig.Data == nil {
			break
		}

		return e.complexity.FirebaseWebpushConfig.Data(childComplexity), true

	case "FirebaseWebpushConfig.headers":
		if e.complexity.FirebaseWebpushConfig.Headers == nil {
			break
		}

		return e.complexity.FirebaseWebpushConfig.Headers(childComplexity), true

	case "GhostCMSAuthor.facebook":
		if e.complexity.GhostCMSAuthor.Facebook == nil {
			break
		}

		return e.complexity.GhostCMSAuthor.Facebook(childComplexity), true

	case "GhostCMSAuthor.id":
		if e.complexity.GhostCMSAuthor.ID == nil {
			break
		}

		return e.complexity.GhostCMSAuthor.ID(childComplexity), true

	case "GhostCMSAuthor.location":
		if e.complexity.GhostCMSAuthor.Location == nil {
			break
		}

		return e.complexity.GhostCMSAuthor.Location(childComplexity), true

	case "GhostCMSAuthor.name":
		if e.complexity.GhostCMSAuthor.Name == nil {
			break
		}

		return e.complexity.GhostCMSAuthor.Name(childComplexity), true

	case "GhostCMSAuthor.profileImage":
		if e.complexity.GhostCMSAuthor.ProfileImage == nil {
			break
		}

		return e.complexity.GhostCMSAuthor.ProfileImage(childComplexity), true

	case "GhostCMSAuthor.slug":
		if e.complexity.GhostCMSAuthor.Slug == nil {
			break
		}

		return e.complexity.GhostCMSAuthor.Slug(childComplexity), true

	case "GhostCMSAuthor.twitter":
		if e.complexity.GhostCMSAuthor.Twitter == nil {
			break
		}

		return e.complexity.GhostCMSAuthor.Twitter(childComplexity), true

	case "GhostCMSAuthor.url":
		if e.complexity.GhostCMSAuthor.URL == nil {
			break
		}

		return e.complexity.GhostCMSAuthor.URL(childComplexity), true

	case "GhostCMSAuthor.website":
		if e.complexity.GhostCMSAuthor.Website == nil {
			break
		}

		return e.complexity.GhostCMSAuthor.Website(childComplexity), true

	case "GhostCMSPost.commentID":
		if e.complexity.GhostCMSPost.CommentID == nil {
			break
		}

		return e.complexity.GhostCMSPost.CommentID(childComplexity), true

	case "GhostCMSPost.createdAt":
		if e.complexity.GhostCMSPost.CreatedAt == nil {
			break
		}

		return e.complexity.GhostCMSPost.CreatedAt(childComplexity), true

	case "GhostCMSPost.excerpt":
		if e.complexity.GhostCMSPost.Excerpt == nil {
			break
		}

		return e.complexity.GhostCMSPost.Excerpt(childComplexity), true

	case "GhostCMSPost.featureImage":
		if e.complexity.GhostCMSPost.FeatureImage == nil {
			break
		}

		return e.complexity.GhostCMSPost.FeatureImage(childComplexity), true

	case "GhostCMSPost.html":
		if e.complexity.GhostCMSPost.HTML == nil {
			break
		}

		return e.complexity.GhostCMSPost.HTML(childComplexity), true

	case "GhostCMSPost.id":
		if e.complexity.GhostCMSPost.ID == nil {
			break
		}

		return e.complexity.GhostCMSPost.ID(childComplexity), true

	case "GhostCMSPost.publishedAt":
		if e.complexity.GhostCMSPost.PublishedAt == nil {
			break
		}

		return e.complexity.GhostCMSPost.PublishedAt(childComplexity), true

	case "GhostCMSPost.readingTime":
		if e.complexity.GhostCMSPost.ReadingTime == nil {
			break
		}

		return e.complexity.GhostCMSPost.ReadingTime(childComplexity), true

	case "GhostCMSPost.slug":
		if e.complexity.GhostCMSPost.Slug == nil {
			break
		}

		return e.complexity.GhostCMSPost.Slug(childComplexity), true

	case "GhostCMSPost.tags":
		if e.complexity.GhostCMSPost.Tags == nil {
			break
		}

		return e.complexity.GhostCMSPost.Tags(childComplexity), true

	case "GhostCMSPost.title":
		if e.complexity.GhostCMSPost.Title == nil {
			break
		}

		return e.complexity.GhostCMSPost.Title(childComplexity), true

	case "GhostCMSPost.url":
		if e.complexity.GhostCMSPost.URL == nil {
			break
		}

		return e.complexity.GhostCMSPost.URL(childComplexity), true

	case "GhostCMSPost.uuid":
		if e.complexity.GhostCMSPost.UUID == nil {
			break
		}

		return e.complexity.GhostCMSPost.UUID(childComplexity), true

	case "GhostCMSPost.updatedAt":
		if e.complexity.GhostCMSPost.UpdatedAt == nil {
			break
		}

		return e.complexity.GhostCMSPost.UpdatedAt(childComplexity), true

	case "GhostCMSTag.description":
		if e.complexity.GhostCMSTag.Description == nil {
			break
		}

		return e.complexity.GhostCMSTag.Description(childComplexity), true

	case "GhostCMSTag.id":
		if e.complexity.GhostCMSTag.ID == nil {
			break
		}

		return e.complexity.GhostCMSTag.ID(childComplexity), true

	case "GhostCMSTag.name":
		if e.complexity.GhostCMSTag.Name == nil {
			break
		}

		return e.complexity.GhostCMSTag.Name(childComplexity), true

	case "GhostCMSTag.slug":
		if e.complexity.GhostCMSTag.Slug == nil {
			break
		}

		return e.complexity.GhostCMSTag.Slug(childComplexity), true

	case "GhostCMSTag.url":
		if e.complexity.GhostCMSTag.URL == nil {
			break
		}

		return e.complexity.GhostCMSTag.URL(childComplexity), true

	case "GhostCMSTag.visibility":
		if e.complexity.GhostCMSTag.Visibility == nil {
			break
		}

		return e.complexity.GhostCMSTag.Visibility(childComplexity), true

	case "Item.actions":
		if e.complexity.Item.Actions == nil {
			break
		}

		return e.complexity.Item.Actions(childComplexity), true

	case "Item.author":
		if e.complexity.Item.Author == nil {
			break
		}

		return e.complexity.Item.Author(childComplexity), true

	case "Item.conversations":
		if e.complexity.Item.Conversations == nil {
			break
		}

		return e.complexity.Item.Conversations(childComplexity), true

	case "Item.expiry":
		if e.complexity.Item.Expiry == nil {
			break
		}

		return e.complexity.Item.Expiry(childComplexity), true

	case "Item.groups":
		if e.complexity.Item.Groups == nil {
			break
		}

		return e.complexity.Item.Groups(childComplexity), true

	case "Item.id":
		if e.complexity.Item.ID == nil {
			break
		}

		return e.complexity.Item.ID(childComplexity), true

	case "Item.icon":
		if e.complexity.Item.Icon == nil {
			break
		}

		return e.complexity.Item.Icon(childComplexity), true

	case "Item.label":
		if e.complexity.Item.Label == nil {
			break
		}

		return e.complexity.Item.Label(childComplexity), true

	case "Item.links":
		if e.complexity.Item.Links == nil {
			break
		}

		return e.complexity.Item.Links(childComplexity), true

	case "Item.notificationChannels":
		if e.complexity.Item.NotificationChannels == nil {
			break
		}

		return e.complexity.Item.NotificationChannels(childComplexity), true

	case "Item.persistent":
		if e.complexity.Item.Persistent == nil {
			break
		}

		return e.complexity.Item.Persistent(childComplexity), true

	case "Item.sequenceNumber":
		if e.complexity.Item.SequenceNumber == nil {
			break
		}

		return e.complexity.Item.SequenceNumber(childComplexity), true

	case "Item.status":
		if e.complexity.Item.Status == nil {
			break
		}

		return e.complexity.Item.Status(childComplexity), true

	case "Item.summary":
		if e.complexity.Item.Summary == nil {
			break
		}

		return e.complexity.Item.Summary(childComplexity), true

	case "Item.tagline":
		if e.complexity.Item.Tagline == nil {
			break
		}

		return e.complexity.Item.Tagline(childComplexity), true

	case "Item.text":
		if e.complexity.Item.Text == nil {
			break
		}

		return e.complexity.Item.Text(childComplexity), true

	case "Item.textType":
		if e.complexity.Item.TextType == nil {
			break
		}

		return e.complexity.Item.TextType(childComplexity), true

	case "Item.timestamp":
		if e.complexity.Item.Timestamp == nil {
			break
		}

		return e.complexity.Item.Timestamp(childComplexity), true

	case "Item.users":
		if e.complexity.Item.Users == nil {
			break
		}

		return e.complexity.Item.Users(childComplexity), true

	case "Item.visibility":
		if e.complexity.Item.Visibility == nil {
			break
		}

		return e.complexity.Item.Visibility(childComplexity), true

	case "Link.description":
		if e.complexity.Link.Description == nil {
			break
		}

		return e.complexity.Link.Description(childComplexity), true

	case "Link.id":
		if e.complexity.Link.ID == nil {
			break
		}

		return e.complexity.Link.ID(childComplexity), true

	case "Link.linkType":
		if e.complexity.Link.LinkType == nil {
			break
		}

		return e.complexity.Link.LinkType(childComplexity), true

	case "Link.thumbnail":
		if e.complexity.Link.Thumbnail == nil {
			break
		}

		return e.complexity.Link.Thumbnail(childComplexity), true

	case "Link.title":
		if e.complexity.Link.Title == nil {
			break
		}

		return e.complexity.Link.Title(childComplexity), true

	case "Link.url":
		if e.complexity.Link.URL == nil {
			break
		}

		return e.complexity.Link.URL(childComplexity), true

	case "Msg.id":
		if e.complexity.Msg.ID == nil {
			break
		}

		return e.complexity.Msg.ID(childComplexity), true

	case "Msg.postedByName":
		if e.complexity.Msg.PostedByName == nil {
			break
		}

		return e.complexity.Msg.PostedByName(childComplexity), true

	case "Msg.postedByUID":
		if e.complexity.Msg.PostedByUID == nil {
			break
		}

		return e.complexity.Msg.PostedByUID(childComplexity), true

	case "Msg.replyTo":
		if e.complexity.Msg.ReplyTo == nil {
			break
		}

		return e.complexity.Msg.ReplyTo(childComplexity), true

	case "Msg.sequenceNumber":
		if e.complexity.Msg.SequenceNumber == nil {
			break
		}

		return e.complexity.Msg.SequenceNumber(childComplexity), true

	case "Msg.text":
		if e.complexity.Msg.Text == nil {
			break
		}

		return e.complexity.Msg.Text(childComplexity), true

	case "Msg.timestamp":
		if e.complexity.Msg.Timestamp == nil {
			break
		}

		return e.complexity.Msg.Timestamp(childComplexity), true

	case "Mutation.billNotification":
		if e.complexity.Mutation.BillNotification == nil {
			break
		}

		args, err := ec.field_Mutation_billNotification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.BillNotification(childComplexity, args["to"].(string), args["productName"].(string), args["billingPeriod"].(string), args["billAmount"].(string), args["paymentInstruction"].(string), args["marketingMessage"].(string)), true

	case "Mutation.claimNotification":
		if e.complexity.Mutation.ClaimNotification == nil {
			break
		}

		args, err := ec.field_Mutation_claimNotification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ClaimNotification(childComplexity, args["to"].(string), args["claimReference"].(string), args["claimTypeParenthesized"].(string), args["provider"].(string), args["visitType"].(string), args["claimTime"].(string), args["marketingMessage"].(string)), true

	case "Mutation.deleteMessage":
		if e.complexity.Mutation.DeleteMessage == nil {
			break
		}

		args, err := ec.field_Mutation_deleteMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.DeleteMessage(childComplexity, args["flavour"].(feedlib.Flavour), args["itemID"].(string), args["messageID"].(string)), true

	case "Mutation.hideFeedItem":
		if e.complexity.Mutation.HideFeedItem == nil {
			break
		}

		args, err := ec.field_Mutation_hideFeedItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.HideFeedItem(childComplexity, args["flavour"].(feedlib.Flavour), args["itemID"].(string)), true

	case "Mutation.hideNudge":
		if e.complexity.Mutation.HideNudge == nil {
			break
		}

		args, err := ec.field_Mutation_hideNudge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.HideNudge(childComplexity, args["flavour"].(feedlib.Flavour), args["nudgeID"].(string)), true

	case "Mutation.phoneNumberVerificationCode":
		if e.complexity.Mutation.PhoneNumberVerificationCode == nil {
			break
		}

		args, err := ec.field_Mutation_phoneNumberVerificationCode_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PhoneNumberVerificationCode(childComplexity, args["to"].(string), args["code"].(string), args["marketingMessage"].(string)), true

	case "Mutation.pinFeedItem":
		if e.complexity.Mutation.PinFeedItem == nil {
			break
		}

		args, err := ec.field_Mutation_pinFeedItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PinFeedItem(childComplexity, args["flavour"].(feedlib.Flavour), args["itemID"].(string)), true

	case "Mutation.postMessage":
		if e.complexity.Mutation.PostMessage == nil {
			break
		}

		args, err := ec.field_Mutation_postMessage_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PostMessage(childComplexity, args["flavour"].(feedlib.Flavour), args["itemID"].(string), args["message"].(feedlib.Message)), true

	case "Mutation.preauthApproval":
		if e.complexity.Mutation.PreauthApproval == nil {
			break
		}

		args, err := ec.field_Mutation_preauthApproval_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PreauthApproval(childComplexity, args["to"].(string), args["currency"].(string), args["amount"].(string), args["benefit"].(string), args["provider"].(string), args["member"].(string), args["careContact"].(string), args["marketingMessage"].(string)), true

	case "Mutation.preauthRequest":
		if e.complexity.Mutation.PreauthRequest == nil {
			break
		}

		args, err := ec.field_Mutation_preauthRequest_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.PreauthRequest(childComplexity, args["to"].(string), args["currency"].(string), args["amount"].(string), args["benefit"].(string), args["provider"].(string), args["requestTime"].(string), args["member"].(string), args["careContact"].(string), args["marketingMessage"].(string)), true

	case "Mutation.processEvent":
		if e.complexity.Mutation.ProcessEvent == nil {
			break
		}

		args, err := ec.field_Mutation_processEvent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ProcessEvent(childComplexity, args["flavour"].(feedlib.Flavour), args["event"].(feedlib.Event)), true

	case "Mutation.recordNPSResponse":
		if e.complexity.Mutation.RecordNPSResponse == nil {
			break
		}

		args, err := ec.field_Mutation_recordNPSResponse_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.RecordNPSResponse(childComplexity, args["input"].(dto.NPSInput)), true

	case "Mutation.resolveFeedItem":
		if e.complexity.Mutation.ResolveFeedItem == nil {
			break
		}

		args, err := ec.field_Mutation_resolveFeedItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ResolveFeedItem(childComplexity, args["flavour"].(feedlib.Flavour), args["itemID"].(string)), true

	case "Mutation.send":
		if e.complexity.Mutation.Send == nil {
			break
		}

		args, err := ec.field_Mutation_send_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Send(childComplexity, args["to"].(string), args["message"].(string)), true

	case "Mutation.sendFCMByPhoneOrEmail":
		if e.complexity.Mutation.SendFCMByPhoneOrEmail == nil {
			break
		}

		args, err := ec.field_Mutation_sendFCMByPhoneOrEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendFCMByPhoneOrEmail(childComplexity, args["phoneNumber"].(*string), args["email"].(*string), args["data"].(map[string]interface{}), args["notification"].(firebasetools.FirebaseSimpleNotificationInput), args["android"].(*firebasetools.FirebaseAndroidConfigInput), args["ios"].(*firebasetools.FirebaseAPNSConfigInput), args["web"].(*firebasetools.FirebaseWebpushConfigInput)), true

	case "Mutation.sendNotification":
		if e.complexity.Mutation.SendNotification == nil {
			break
		}

		args, err := ec.field_Mutation_sendNotification_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendNotification(childComplexity, args["registrationTokens"].([]string), args["data"].(map[string]interface{}), args["notification"].(firebasetools.FirebaseSimpleNotificationInput), args["android"].(*firebasetools.FirebaseAndroidConfigInput), args["ios"].(*firebasetools.FirebaseAPNSConfigInput), args["web"].(*firebasetools.FirebaseWebpushConfigInput)), true

	case "Mutation.sendToMany":
		if e.complexity.Mutation.SendToMany == nil {
			break
		}

		args, err := ec.field_Mutation_sendToMany_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SendToMany(childComplexity, args["message"].(string), args["to"].([]string)), true

	case "Mutation.showFeedItem":
		if e.complexity.Mutation.ShowFeedItem == nil {
			break
		}

		args, err := ec.field_Mutation_showFeedItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ShowFeedItem(childComplexity, args["flavour"].(feedlib.Flavour), args["itemID"].(string)), true

	case "Mutation.showNudge":
		if e.complexity.Mutation.ShowNudge == nil {
			break
		}

		args, err := ec.field_Mutation_showNudge_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.ShowNudge(childComplexity, args["flavour"].(feedlib.Flavour), args["nudgeID"].(string)), true

	case "Mutation.simpleEmail":
		if e.complexity.Mutation.SimpleEmail == nil {
			break
		}

		args, err := ec.field_Mutation_simpleEmail_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SimpleEmail(childComplexity, args["subject"].(string), args["text"].(string), args["to"].([]string)), true

	case "Mutation.sladeOTP":
		if e.complexity.Mutation.SladeOtp == nil {
			break
		}

		args, err := ec.field_Mutation_sladeOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.SladeOtp(childComplexity, args["to"].(string), args["name"].(string), args["otp"].(string), args["marketingMessage"].(string)), true

	case "Mutation.testFeature":
		if e.complexity.Mutation.TestFeature == nil {
			break
		}

		return e.complexity.Mutation.TestFeature(childComplexity), true

	case "Mutation.unpinFeedItem":
		if e.complexity.Mutation.UnpinFeedItem == nil {
			break
		}

		args, err := ec.field_Mutation_unpinFeedItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnpinFeedItem(childComplexity, args["flavour"].(feedlib.Flavour), args["itemID"].(string)), true

	case "Mutation.unresolveFeedItem":
		if e.complexity.Mutation.UnresolveFeedItem == nil {
			break
		}

		args, err := ec.field_Mutation_unresolveFeedItem_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.UnresolveFeedItem(childComplexity, args["flavour"].(feedlib.Flavour), args["itemID"].(string)), true

	case "Mutation.upload":
		if e.complexity.Mutation.Upload == nil {
			break
		}

		args, err := ec.field_Mutation_upload_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.Upload(childComplexity, args["input"].(profileutils.UploadInput)), true

	case "Mutation.verifyEmailOTP":
		if e.complexity.Mutation.VerifyEmailOtp == nil {
			break
		}

		args, err := ec.field_Mutation_verifyEmailOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyEmailOtp(childComplexity, args["email"].(string), args["otp"].(string)), true

	case "Mutation.verifyOTP":
		if e.complexity.Mutation.VerifyOtp == nil {
			break
		}

		args, err := ec.field_Mutation_verifyOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VerifyOtp(childComplexity, args["msisdn"].(string), args["otp"].(string)), true

	case "Mutation.virtualCards":
		if e.complexity.Mutation.VirtualCards == nil {
			break
		}

		args, err := ec.field_Mutation_virtualCards_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VirtualCards(childComplexity, args["to"].(string), args["wellnessCardFamily"].(string), args["virtualCardLink"].(string), args["marketingMessage"].(string)), true

	case "Mutation.visitStart":
		if e.complexity.Mutation.VisitStart == nil {
			break
		}

		args, err := ec.field_Mutation_visitStart_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.VisitStart(childComplexity, args["to"].(string), args["memberName"].(string), args["benefitName"].(string), args["locationName"].(string), args["startTime"].(string), args["balance"].(string), args["marketingMessage"].(string)), true

	case "Mutation.wellnessCardActivationDependant":
		if e.complexity.Mutation.WellnessCardActivationDependant == nil {
			break
		}

		args, err := ec.field_Mutation_wellnessCardActivationDependant_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.WellnessCardActivationDependant(childComplexity, args["to"].(string), args["memberName"].(string), args["cardName"].(string), args["marketingMessage"].(string)), true

	case "Mutation.wellnessCardActivationPrincipal":
		if e.complexity.Mutation.WellnessCardActivationPrincipal == nil {
			break
		}

		args, err := ec.field_Mutation_wellnessCardActivationPrincipal_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Mutation.WellnessCardActivationPrincipal(childComplexity, args["to"].(string), args["memberName"].(string), args["cardName"].(string), args["minorAgeThreshold"].(string), args["marketingMessage"].(string)), true

	case "NPSResponse.email":
		if e.complexity.NPSResponse.Email == nil {
			break
		}

		return e.complexity.NPSResponse.Email(childComplexity), true

	case "NPSResponse.feedback":
		if e.complexity.NPSResponse.Feedback == nil {
			break
		}

		return e.complexity.NPSResponse.Feedback(childComplexity), true

	case "NPSResponse.id":
		if e.complexity.NPSResponse.ID == nil {
			break
		}

		return e.complexity.NPSResponse.ID(childComplexity), true

	case "NPSResponse.msisdn":
		if e.complexity.NPSResponse.MSISDN == nil {
			break
		}

		return e.complexity.NPSResponse.MSISDN(childComplexity), true

	case "NPSResponse.name":
		if e.complexity.NPSResponse.Name == nil {
			break
		}

		return e.complexity.NPSResponse.Name(childComplexity), true

	case "NPSResponse.score":
		if e.complexity.NPSResponse.Score == nil {
			break
		}

		return e.complexity.NPSResponse.Score(childComplexity), true

	case "NPSResponse.sladeCode":
		if e.complexity.NPSResponse.SladeCode == nil {
			break
		}

		return e.complexity.NPSResponse.SladeCode(childComplexity), true

	case "NotificationBody.deleteMessage":
		if e.complexity.NotificationBody.DeleteMessage == nil {
			break
		}

		return e.complexity.NotificationBody.DeleteMessage(childComplexity), true

	case "NotificationBody.hideMessage":
		if e.complexity.NotificationBody.HideMessage == nil {
			break
		}

		return e.complexity.NotificationBody.HideMessage(childComplexity), true

	case "NotificationBody.publishMessage":
		if e.complexity.NotificationBody.PublishMessage == nil {
			break
		}

		return e.complexity.NotificationBody.PublishMessage(childComplexity), true

	case "NotificationBody.resolveMessage":
		if e.complexity.NotificationBody.ResolveMessage == nil {
			break
		}

		return e.complexity.NotificationBody.ResolveMessage(childComplexity), true

	case "NotificationBody.showMessage":
		if e.complexity.NotificationBody.ShowMessage == nil {
			break
		}

		return e.complexity.NotificationBody.ShowMessage(childComplexity), true

	case "NotificationBody.unresolveMessage":
		if e.complexity.NotificationBody.UnresolveMessage == nil {
			break
		}

		return e.complexity.NotificationBody.UnresolveMessage(childComplexity), true

	case "Nudge.actions":
		if e.complexity.Nudge.Actions == nil {
			break
		}

		return e.complexity.Nudge.Actions(childComplexity), true

	case "Nudge.expiry":
		if e.complexity.Nudge.Expiry == nil {
			break
		}

		return e.complexity.Nudge.Expiry(childComplexity), true

	case "Nudge.groups":
		if e.complexity.Nudge.Groups == nil {
			break
		}

		return e.complexity.Nudge.Groups(childComplexity), true

	case "Nudge.id":
		if e.complexity.Nudge.ID == nil {
			break
		}

		return e.complexity.Nudge.ID(childComplexity), true

	case "Nudge.links":
		if e.complexity.Nudge.Links == nil {
			break
		}

		return e.complexity.Nudge.Links(childComplexity), true

	case "Nudge.notificationBody":
		if e.complexity.Nudge.NotificationBody == nil {
			break
		}

		return e.complexity.Nudge.NotificationBody(childComplexity), true

	case "Nudge.notificationChannels":
		if e.complexity.Nudge.NotificationChannels == nil {
			break
		}

		return e.complexity.Nudge.NotificationChannels(childComplexity), true

	case "Nudge.sequenceNumber":
		if e.complexity.Nudge.SequenceNumber == nil {
			break
		}

		return e.complexity.Nudge.SequenceNumber(childComplexity), true

	case "Nudge.status":
		if e.complexity.Nudge.Status == nil {
			break
		}

		return e.complexity.Nudge.Status(childComplexity), true

	case "Nudge.text":
		if e.complexity.Nudge.Text == nil {
			break
		}

		return e.complexity.Nudge.Text(childComplexity), true

	case "Nudge.title":
		if e.complexity.Nudge.Title == nil {
			break
		}

		return e.complexity.Nudge.Title(childComplexity), true

	case "Nudge.users":
		if e.complexity.Nudge.Users == nil {
			break
		}

		return e.complexity.Nudge.Users(childComplexity), true

	case "Nudge.visibility":
		if e.complexity.Nudge.Visibility == nil {
			break
		}

		return e.complexity.Nudge.Visibility(childComplexity), true

	case "Payload.data":
		if e.complexity.Payload.Data == nil {
			break
		}

		return e.complexity.Payload.Data(childComplexity), true

	case "Query.emailVerificationOTP":
		if e.complexity.Query.EmailVerificationOtp == nil {
			break
		}

		args, err := ec.field_Query_emailVerificationOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.EmailVerificationOtp(childComplexity, args["email"].(string)), true

	case "Query.findUploadByID":
		if e.complexity.Query.FindUploadByID == nil {
			break
		}

		args, err := ec.field_Query_findUploadByID_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.FindUploadByID(childComplexity, args["id"].(string)), true

	case "Query.generateAndEmailOTP":
		if e.complexity.Query.GenerateAndEmailOtp == nil {
			break
		}

		args, err := ec.field_Query_generateAndEmailOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GenerateAndEmailOtp(childComplexity, args["msisdn"].(string), args["email"].(*string), args["appId"].(*string)), true

	case "Query.generateOTP":
		if e.complexity.Query.GenerateOtp == nil {
			break
		}

		args, err := ec.field_Query_generateOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GenerateOtp(childComplexity, args["msisdn"].(string), args["appId"].(*string)), true

	case "Query.generateRetryOTP":
		if e.complexity.Query.GenerateRetryOtp == nil {
			break
		}

		args, err := ec.field_Query_generateRetryOTP_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GenerateRetryOtp(childComplexity, args["msisdn"].(string), args["retryStep"].(int), args["appId"].(*string)), true

	case "Query.getFaqsContent":
		if e.complexity.Query.GetFaqsContent == nil {
			break
		}

		args, err := ec.field_Query_getFaqsContent_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetFaqsContent(childComplexity, args["flavour"].(feedlib.Flavour)), true

	case "Query.getFeed":
		if e.complexity.Query.GetFeed == nil {
			break
		}

		args, err := ec.field_Query_getFeed_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.GetFeed(childComplexity, args["flavour"].(feedlib.Flavour), args["isAnonymous"].(bool), args["persistent"].(feedlib.BooleanFilter), args["status"].(*feedlib.Status), args["visibility"].(*feedlib.Visibility), args["expired"].(*feedlib.BooleanFilter), args["filterParams"].(*helpers.FilterParams)), true

	case "Query.getLibraryContent":
		if e.complexity.Query.GetLibraryContent == nil {
			break
		}

		return e.complexity.Query.GetLibraryContent(childComplexity), true

	case "Query.labels":
		if e.complexity.Query.Labels == nil {
			break
		}

		args, err := ec.field_Query_labels_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Labels(childComplexity, args["flavour"].(feedlib.Flavour)), true

	case "Query.listNPSResponse":
		if e.complexity.Query.ListNPSResponse == nil {
			break
		}

		return e.complexity.Query.ListNPSResponse(childComplexity), true

	case "Query.notifications":
		if e.complexity.Query.Notifications == nil {
			break
		}

		args, err := ec.field_Query_notifications_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.Notifications(childComplexity, args["registrationToken"].(string), args["newerThan"].(time.Time), args["limit"].(int)), true

	case "Query.twilioAccessToken":
		if e.complexity.Query.TwilioAccessToken == nil {
			break
		}

		return e.complexity.Query.TwilioAccessToken(childComplexity), true

	case "Query.unreadPersistentItems":
		if e.complexity.Query.UnreadPersistentItems == nil {
			break
		}

		args, err := ec.field_Query_unreadPersistentItems_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.UnreadPersistentItems(childComplexity, args["flavour"].(feedlib.Flavour)), true

	case "Query._service":
		if e.complexity.Query.__resolve__service == nil {
			break
		}

		return e.complexity.Query.__resolve__service(childComplexity), true

	case "Query._entities":
		if e.complexity.Query.__resolve_entities == nil {
			break
		}

		args, err := ec.field_Query__entities_args(context.TODO(), rawArgs)
		if err != nil {
			return 0, false
		}

		return e.complexity.Query.__resolve_entities(childComplexity, args["representations"].([]map[string]interface{})), true

	case "Recipient.cost":
		if e.complexity.Recipient.Cost == nil {
			break
		}

		return e.complexity.Recipient.Cost(childComplexity), true

	case "Recipient.messageID":
		if e.complexity.Recipient.MessageID == nil {
			break
		}

		return e.complexity.Recipient.MessageID(childComplexity), true

	case "Recipient.number":
		if e.complexity.Recipient.Number == nil {
			break
		}

		return e.complexity.Recipient.Number(childComplexity), true

	case "Recipient.status":
		if e.complexity.Recipient.Status == nil {
			break
		}

		return e.complexity.Recipient.Status(childComplexity), true

	case "SMS.recipients":
		if e.complexity.Sms.Recipients == nil {
			break
		}

		return e.complexity.Sms.Recipients(childComplexity), true

	case "SavedNotification.apnsConfig":
		if e.complexity.SavedNotification.APNSConfig == nil {
			break
		}

		return e.complexity.SavedNotification.APNSConfig(childComplexity), true

	case "SavedNotification.androidConfig":
		if e.complexity.SavedNotification.AndroidConfig == nil {
			break
		}

		return e.complexity.SavedNotification.AndroidConfig(childComplexity), true

	case "SavedNotification.data":
		if e.complexity.SavedNotification.Data == nil {
			break
		}

		return e.complexity.SavedNotification.Data(childComplexity), true

	case "SavedNotification.id":
		if e.complexity.SavedNotification.ID == nil {
			break
		}

		return e.complexity.SavedNotification.ID(childComplexity), true

	case "SavedNotification.messageID":
		if e.complexity.SavedNotification.MessageID == nil {
			break
		}

		return e.complexity.SavedNotification.MessageID(childComplexity), true

	case "SavedNotification.notification":
		if e.complexity.SavedNotification.Notification == nil {
			break
		}

		return e.complexity.SavedNotification.Notification(childComplexity), true

	case "SavedNotification.registrationToken":
		if e.complexity.SavedNotification.RegistrationToken == nil {
			break
		}

		return e.complexity.SavedNotification.RegistrationToken(childComplexity), true

	case "SavedNotification.timestamp":
		if e.complexity.SavedNotification.Timestamp == nil {
			break
		}

		return e.complexity.SavedNotification.Timestamp(childComplexity), true

	case "SavedNotification.webpushConfig":
		if e.complexity.SavedNotification.WebpushConfig == nil {
			break
		}

		return e.complexity.SavedNotification.WebpushConfig(childComplexity), true

	case "SendMessageResponse.SMSMessageData":
		if e.complexity.SendMessageResponse.SMSMessageData == nil {
			break
		}

		return e.complexity.SendMessageResponse.SMSMessageData(childComplexity), true

	case "Upload.base64data":
		if e.complexity.Upload.Base64data == nil {
			break
		}

		return e.complexity.Upload.Base64data(childComplexity), true

	case "Upload.contentType":
		if e.complexity.Upload.ContentType == nil {
			break
		}

		return e.complexity.Upload.ContentType(childComplexity), true

	case "Upload.creation":
		if e.complexity.Upload.Creation == nil {
			break
		}

		return e.complexity.Upload.Creation(childComplexity), true

	case "Upload.hash":
		if e.complexity.Upload.Hash == nil {
			break
		}

		return e.complexity.Upload.Hash(childComplexity), true

	case "Upload.id":
		if e.complexity.Upload.ID == nil {
			break
		}

		return e.complexity.Upload.ID(childComplexity), true

	case "Upload.language":
		if e.complexity.Upload.Language == nil {
			break
		}

		return e.complexity.Upload.Language(childComplexity), true

	case "Upload.size":
		if e.complexity.Upload.Size == nil {
			break
		}

		return e.complexity.Upload.Size(childComplexity), true

	case "Upload.title":
		if e.complexity.Upload.Title == nil {
			break
		}

		return e.complexity.Upload.Title(childComplexity), true

	case "Upload.url":
		if e.complexity.Upload.URL == nil {
			break
		}

		return e.complexity.Upload.URL(childComplexity), true

	case "_Service.sdl":
		if e.complexity.Service.SDL == nil {
			break
		}

		return e.complexity.Service.SDL(childComplexity), true

	}
	return 0, false
}

func (e *executableSchema) Exec(ctx context.Context) graphql.ResponseHandler {
	rc := graphql.GetOperationContext(ctx)
	ec := executionContext{rc, e}
	first := true

	switch rc.Operation.Operation {
	case ast.Query:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Query(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}
	case ast.Mutation:
		return func(ctx context.Context) *graphql.Response {
			if !first {
				return nil
			}
			first = false
			data := ec._Mutation(ctx, rc.Operation.SelectionSet)
			var buf bytes.Buffer
			data.MarshalGQL(&buf)

			return &graphql.Response{
				Data: buf.Bytes(),
			}
		}

	default:
		return graphql.OneShot(graphql.ErrorResponse(ctx, "unsupported GraphQL operation"))
	}
}

type executionContext struct {
	*graphql.OperationContext
	*executableSchema
}

func (ec *executionContext) introspectSchema() (*introspection.Schema, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapSchema(parsedSchema), nil
}

func (ec *executionContext) introspectType(name string) (*introspection.Type, error) {
	if ec.DisableIntrospection {
		return nil, errors.New("introspection disabled")
	}
	return introspection.WrapTypeFromDef(parsedSchema, parsedSchema.Types[name]), nil
}

var sources = []*ast.Source{
	{Name: "pkg/engagement/presentation/graph/mailgun.graphql", Input: `extend type Mutation {
  testFeature: Boolean!
}
`, BuiltIn: false},
	{Name: "federation/directives.graphql", Input: `
scalar _Any
scalar _FieldSet

directive @external on FIELD_DEFINITION
directive @requires(fields: _FieldSet!) on FIELD_DEFINITION
directive @provides(fields: _FieldSet!) on FIELD_DEFINITION
directive @key(fields: _FieldSet!) on OBJECT | INTERFACE
directive @extends on OBJECT
`, BuiltIn: true},
	{Name: "imported.graphql", Input: `
"""
EventAttachment is used to serialize Google Calendar event attachments.
"""
type EventAttachment {
    fileID: String!
    fileURL: String!
    iconLink: String!
    mimeType: String!
    title: String!
}


"""
EventAttendee is used to serialize Google Calendar event attendees.
"""
type EventAttendee {
    id: String!
    additionalGuests: Int!
    comment: String!
    displayName: String!
    email: String!
    optional: Boolean!
    organizer: Boolean!
    resource: Boolean!
    responseStatus: String!
    self: Boolean!
}

"""
EventDateTime is used to serialize Google Calendar event dates and times.
"""
type EventDateTime {
    date: String!
    dateTime: String!
    timeZone: String!
}


"""
CalendarEvent is used to serialize Google Calendar events.

Some fields have been omitted:

- extended properties
- gadget
- organizer
- reminders
- event source
- conference data
"""
type CalendarEvent {
    id: ID!
    anyoneCanAddSelf: Boolean!
    attachments: [EventAttachment!]!
    attendees: [EventAttendee!]!
    attendeesOmitted: Boolean!
    colorId: String!
    description: String!
    endTimeUnspecified: Boolean!
    etag: String!
    guestsCanInviteOthers: Boolean
    guestsCanModify: Boolean!
    guestsCanSeeOtherGuests: Boolean
    hangoutLink: String!
    htmlLink: String!
    iCalUID: String!
    kind: String!
    location: String!
    locked: Boolean!
    originalStartTime: EventDateTime
    privateCopy: Boolean!
    recurrence: [String!]!
    recurringEventId: String!
    sequence: Int!
    start: EventDateTime
    end: EventDateTime
    status: String!
    summary: String!
    transparency: String!
    updated: String!
    visibility: String!
}
extend type Mutation {
    sendNotification(
        registrationTokens: [String!]!,
        data: Map!,
        notification: FirebaseSimpleNotificationInput!,
        android: FirebaseAndroidConfigInput,
        ios: FirebaseAPNSConfigInput,
        web: FirebaseWebpushConfigInput
    ): Boolean!

    sendFCMByPhoneOrEmail(
        phoneNumber: String,
        email: String,
        data: Map!
        notification: FirebaseSimpleNotificationInput!,
        android: FirebaseAndroidConfigInput,
        ios: FirebaseAPNSConfigInput,
        web: FirebaseWebpushConfigInput
    ):Boolean!
}

extend type Query {
    notifications(
        registrationToken: String!
        newerThan: Time!
        limit: Int!
    ): [SavedNotification!]!
}
scalar Time
scalar Map

enum BooleanFilter {
  TRUE
  FALSE
  BOTH
}

enum Flavour {
  PRO
  CONSUMER
}

enum Keys {
  actions
  nudges
  items
}

# Status of an item or nudge
enum Status {
  PENDING
  IN_PROGRESS
  DONE
}

# Visibility of an item or nudge
enum Visibility {
  SHOW
  HIDE
}

enum ActionType {
  PRIMARY
  SECONDARY
  OVERFLOW
  FLOATING
}

enum Handling {
  INLINE
  FULL_PAGE
}

enum Channel {
  FCM
  EMAIL
  SMS
  WHATSAPP
}

enum LinkType {
  YOUTUBE_VIDEO
  PNG_IMAGE
  PDF_DOCUMENT
  SVG_IMAGE
  DEFAULT
}

enum TextType {
  HTML
  MARKDOWN
  PLAIN
}

# Feed is the top level access point for a user's feed.
type Feed @key(fields: "id") {
  id: String!
  sequenceNumber: Int!
  uid: String!
  flavour: Flavour!
  actions: [Action!]!
  nudges: [Nudge!]!
  items: [Item!]!
  isAnonymous: Boolean!
}

type Nudge {
  id: String!
  sequenceNumber: Int!
  visibility: Visibility!
  status: Status!
  expiry: Time
  title: String!
  text: String!
  actions: [Action!]!
  groups: [String]
  users: [String]
  links: [Link]
  notificationChannels: [Channel]
  notificationBody: NotificationBody
}

type Item {
  id: String!
  sequenceNumber: Int!
  expiry: Time!
  persistent: Boolean!
  status: Status!
  visibility: Visibility!
  icon: Link!
  author: String!
  tagline: String!
  label: String!
  timestamp: Time!
  summary: String!
  text: String!
  textType: TextType!
  links: [Link]
  actions: [Action]
  conversations: [Msg]
  users: [String]
  groups: [String]
  notificationChannels: [Channel]
}

type Action {
  id: String!
  sequenceNumber: Int!
  name: String!
  icon: Link!
  actionType: ActionType!
  handling: Handling!
  allowAnonymous: Boolean!
}

type Event {
  id: String!
  name: String!
  context: Context
  payload: Payload
}

input EventInput {
  name: String!
  context: ContextInput!
  payload: PayloadInput!
}

type Context {
  userID: String!
  flavour: Flavour!
  organizationID: String!
  locationID: String!
  timestamp: Time!
}

input ContextInput {
  userID: String!
  organizationID: String!
  locationID: String!
  timestamp: Time!
}

type Payload {
  data: Map
}

input PayloadInput {
  data: Map!
}

type Msg {
  id: String!
  sequenceNumber: Int!
  text: String!
  replyTo: String
  postedByUID: String!
  postedByName: String!
  timestamp: Time!
}

input MsgInput {
  id: String!
  sequenceNumber: Int!
  text: String!
  replyTo: String
  postedByUID: String!
  postedByName: String!
  timestamp: Time!
}

type Link {
  id: String!
  url: String!
  linkType: LinkType!
  title: String!
  description: String!
  thumbnail: String!
}

type FilterParams {
  labels: [String]
}

type NotificationBody {
  publishMessage: String!
  deleteMessage: String!
  resolveMessage: String!
  unresolveMessage: String!
  showMessage: String!
  hideMessage: String!
}

input FilterParamsInput {
  labels: [String]
}

extend type Query {
  getFeed(
    flavour: Flavour!
    isAnonymous: Boolean!
    persistent: BooleanFilter!
    status: Status
    visibility: Visibility
    expired: BooleanFilter
    filterParams: FilterParamsInput
  ): Feed!

  labels(flavour: Flavour!): [String!]!
  unreadPersistentItems(flavour: Flavour!): Int!
}

extend type Mutation {
  resolveFeedItem(flavour: Flavour!, itemID: String!): Item!
  unresolveFeedItem(flavour: Flavour!, itemID: String!): Item!
  pinFeedItem(flavour: Flavour!, itemID: String!): Item!
  unpinFeedItem(flavour: Flavour!, itemID: String!): Item!
  hideFeedItem(flavour: Flavour!, itemID: String!): Item!
  showFeedItem(flavour: Flavour!, itemID: String!): Item!
  hideNudge(flavour: Flavour!, nudgeID: String!): Nudge!
  showNudge(flavour: Flavour!, nudgeID: String!): Nudge!
  postMessage(flavour: Flavour!, itemID: String!, message: MsgInput!): Msg!
  deleteMessage(
    flavour: Flavour!
    itemID: String!
    messageID: String!
  ): Boolean!
  processEvent(flavour: Flavour!, event: EventInput!): Boolean!
}

input FirebaseSimpleNotificationInput {
    title: String!
    body: String!
    imageURL: String!
    data: Map
}

input FirebaseAndroidConfigInput {
    priority: String!
    collapseKey: String
    restrictedPackageName: String
    data: Map
}

input FirebaseWebpushConfigInput {
    headers: Map
    data: Map
}

input FirebaseAPNSConfigInput {
    headers: Map
}scalar Date

type GhostCMSPost {
  id: ID!
  slug: String!
  uuid: String!
  title: String!
  html: String!
  excerpt: String!
  url: String!
  featureImage: String!
  readingTime: Int!
  tags: [GhostCMSTag!]!
  createdAt: Time!
  publishedAt: Time!
  updatedAt: Time!
  commentID: String!
}

type GhostCMSTag {
  id: ID!
  name: String!
  slug: String!
  description: String
  visibility: String!
  url: String!
}

type GhostCMSAuthor {
  id: ID!
  name: String!
  slug: String!
  url: String!
  profileImage: String
  website: String
  location: String
  facebook: String
  twitter: String
}

type Query {
  getLibraryContent: [GhostCMSPost!]!
  getFaqsContent(flavour: Flavour!): [GhostCMSPost!]!
}
extend type Mutation {
  simpleEmail(subject: String!, text: String!, to: [String!]!): String!
}type Dummy @key(fields: "id") {
  id: ID
}

extend type Query {
  # the msisdn should be a fully qualified phone number
  # e.g +254723002959
  generateOTP(msisdn: String!, appId: String): String!
  generateAndEmailOTP(msisdn: String!, email: String, appId: String): String!
  generateRetryOTP(msisdn: String!, retryStep: Int!, appId: String): String!
  emailVerificationOTP(email: String!): String!
}

extend type Mutation {
  verifyOTP(msisdn: String!, otp: String!): Boolean!
  verifyEmailOTP(email: String!, otp: String!): Boolean!
}
extend type Mutation {
  send(to: String!, message: String!): SendMessageResponse!

  sendToMany(message: String!, to: [String!]!): SendMessageResponse!
}

type Recipient {
  number: String!
  cost: String!
  status: String!
  messageID: String!
}

type SMS {
  recipients: [Recipient!]!
}

type SendMessageResponse {
  SMSMessageData: SMS!
}

enum SenderID {
  SLADE360
  BEWELL
}
input FeedbackInput {
    question: String!
    answer: String!
}

type Feedback {
    question: String!
    answer: String!
}

input NPSInput {
    name: String!
    score: Int!
    sladeCode: String!

    email: String
    phoneNumber: String
    feedback: [FeedbackInput]
}

type NPSResponse {
	id: String!
	name: String!
	score: Int!
	sladeCode: String!
	email: String
	msisdn: String
	feedback: [Feedback]
}

extend type Mutation {
    recordNPSResponse(input: NPSInput!): Boolean!
}

extend type Query {
    listNPSResponse:[NPSResponse!]!
}extend type Query {
  """
  twilioAccessToken requests for the creation of a Twilio room and the
  issuance of an access token that is linked to that room.
  """
  twilioAccessToken: AccessToken!
}
"""
AccessToken is used to return the credentials that are needed in order
to access a Twilio video room.
"""
type AccessToken @key(fields: "jwt") @key(fields: "uniqueName") {
  jwt: String!
  uniqueName: String!
  sid: String!
  dateUpdated: Time!
  status: String!
  type: String!
  maxParticipants: Int!
  duration: Int
}

type FirebaseSimpleNotification {
  title: String!
  body: String!
  imageURL: String
  data: Map
}

type FirebaseAndroidConfig {
  collapseKey: String!
  priority: String!
  restrictedPackageName: String!
  data: Map
}

type FirebaseWebpushConfig {
  headers: Map
  data: Map
}

type FirebaseAPNSConfig {
  headers: Map
}

type SavedNotification @key(fields: "id") {
  id: String!
  registrationToken: String!
  messageID: String!
  timestamp: Time!
  data: Map
  notification: FirebaseSimpleNotification
  androidConfig: FirebaseAndroidConfig
  webpushConfig: FirebaseWebpushConfig
  apnsConfig: FirebaseAPNSConfig
}

# this input is used to CREATE a new upload
input UploadInput {
  title: String!
  contentType: String!
  language: String!
  base64data: String!
  filename: String!
}

# this input is used to SERIALIZE back an already created upload
type Upload {
  id: ID!
  url: String!
  size: Int!
  hash: String!
  creation: Time!

  title: String!
  contentType: String!
  language: String!
  base64data: String!
}

extend type Query {
  findUploadByID(id: String!): Upload!
}

extend type Mutation {
  upload(input: UploadInput!): Upload!
}
extend type Mutation {
  # Your phone number verification code is {{1}}
  phoneNumberVerificationCode(
    to: String!
    code: String!
    marketingMessage: String!
  ): Boolean!

  # Dear {{1}}, your {{2}} card has been activated. {{3}}
  wellnessCardActivationDependant(
    to: String!
    memberName: String!
    cardName: String!
    marketingMessage: String!
  ): Boolean!

  # Dear {{1}}, your {{2}} card has been activated. Cards for minors under {{3}} years have also been activated. {{4}}
  wellnessCardActivationPrincipal(
    to: String!
    memberName: String!
    cardName: String!
    minorAgeThreshold: String!
    marketingMessage: String!
  ): Boolean!

  # Hello your {{1}} bill for {{2}} of {{3}} is ready. Make payment via {{4}} to continue enjoying the platform. {{5}}
  billNotification(
    to: String!
    productName: String!
    billingPeriod: String!
    billAmount: String!
    paymentInstruction: String!
    marketingMessage: String!
  ): Boolean!

  # Slade 360 virtual Wellness Cards for {{1}} have been created. You can access the virtual cards at {{2}}. {{3}}
  virtualCards(
    to: String!
    wellnessCardFamily: String!
    virtualCardLink: String!
    marketingMessage: String!
  ): Boolean!

  # Dear {{1}} {{2}} visit has been started at {{3}} on {{4}}.  Your balance is {{5}}. {{6}}
  visitStart(
    to: String!
    memberName: String!
    benefitName: String!
    locationName: String!
    startTime: String!
    balance: String!
    marketingMessage: String!
  ): Boolean!

  # A claim of {{1}} {{2}} was lodged by {{3}} for {{4}} visit on {{5}}. {{6}}
  claimNotification(
    to: String!
    claimReference: String!
    claimTypeParenthesized: String!
    provider: String!
    visitType: String!
    claimTime: String!
    marketingMessage: String!
  ): Boolean!

  # Preauth approval of {{1}} {{2}} for {{3}} benefit at {{4}} for {{5}} has been granted. Contact your care manager at {{6}} for any queries. {{7}}
  preauthApproval(
    to: String!
    currency: String!
    amount: String!
    benefit: String!
    provider: String!
    member: String!
    careContact: String!
    marketingMessage: String!
  ): Boolean!

  # Preauth request of {{1}} {{2}} for {{3}} benefit was lodged by {{4}} on {{5}} for the visit by {{6}}. Contact your care manager at {{7}} for any queries. {{8}}
  preauthRequest(
    to: String!
    currency: String!
    amount: String!
    benefit: String!
    provider: String!
    requestTime: String!
    member: String!
    careContact: String!
    marketingMessage: String!
  ): Boolean!

  # Dear {{1}}, your SladeID OTP is {{2}}. {{3}}
  sladeOTP(
    to: String!
    name: String!
    otp: String!
    marketingMessage: String!
  ): Boolean!
}
`, BuiltIn: false},
	{Name: "federation/entity.graphql", Input: `
# a union of all types that use the @key directive
union _Entity = AccessToken | Dummy | Feed | SavedNotification

# fake type to build resolver interfaces for users to implement
type Entity {
		findAccessTokenByJwt(jwt: String!,): AccessToken!
	findDummyByID(id: ID,): Dummy!
	findFeedByID(id: String!,): Feed!
	findSavedNotificationByID(id: String!,): SavedNotification!

}

type _Service {
  sdl: String
}

extend type Query {
  _entities(representations: [_Any!]!): [_Entity]!
  _service: _Service!
}
`, BuiltIn: true},
}
var parsedSchema = gqlparser.MustLoadSchema(sources...)

// endregion ************************** generated!.gotpl **************************

// region    ***************************** args.gotpl *****************************

func (ec *executionContext) field_Entity_findAccessTokenByJwt_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["jwt"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("jwt"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["jwt"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findDummyByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalOID2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findFeedByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Entity_findSavedNotificationByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_billNotification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["productName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("productName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["productName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["billingPeriod"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billingPeriod"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["billingPeriod"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["billAmount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("billAmount"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["billAmount"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["paymentInstruction"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("paymentInstruction"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["paymentInstruction"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["marketingMessage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMessage"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketingMessage"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_claimNotification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["claimReference"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claimReference"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["claimReference"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["claimTypeParenthesized"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claimTypeParenthesized"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["claimTypeParenthesized"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["provider"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["provider"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["visitType"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visitType"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["visitType"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["claimTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("claimTime"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["claimTime"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["marketingMessage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMessage"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketingMessage"] = arg6
	return args, nil
}

func (ec *executionContext) field_Mutation_deleteMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["messageID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("messageID"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["messageID"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_hideFeedItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_hideNudge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["nudgeID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nudgeID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nudgeID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_phoneNumberVerificationCode_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["code"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("code"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["code"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["marketingMessage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMessage"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketingMessage"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_pinFeedItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_postMessage_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg1
	var arg2 feedlib.Message
	if tmp, ok := rawArgs["message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
		arg2, err = ec.unmarshalNMsgInput2githubᚗcomᚋsavannahghiᚋfeedlibᚐMessage(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["message"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_preauthApproval_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["currency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["currency"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["amount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["amount"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["benefit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("benefit"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["benefit"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["provider"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["provider"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["member"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["member"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["careContact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("careContact"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["careContact"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["marketingMessage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMessage"))
		arg7, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketingMessage"] = arg7
	return args, nil
}

func (ec *executionContext) field_Mutation_preauthRequest_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["currency"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("currency"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["currency"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["amount"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("amount"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["amount"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["benefit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("benefit"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["benefit"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["provider"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("provider"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["provider"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["requestTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("requestTime"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["requestTime"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["member"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("member"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["member"] = arg6
	var arg7 string
	if tmp, ok := rawArgs["careContact"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("careContact"))
		arg7, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["careContact"] = arg7
	var arg8 string
	if tmp, ok := rawArgs["marketingMessage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMessage"))
		arg8, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketingMessage"] = arg8
	return args, nil
}

func (ec *executionContext) field_Mutation_processEvent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 feedlib.Event
	if tmp, ok := rawArgs["event"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("event"))
		arg1, err = ec.unmarshalNEventInput2githubᚗcomᚋsavannahghiᚋfeedlibᚐEvent(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["event"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_recordNPSResponse_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 dto.NPSInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNNPSInput2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐNPSInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_resolveFeedItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_sendFCMByPhoneOrEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 *string
	if tmp, ok := rawArgs["phoneNumber"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
		arg0, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["phoneNumber"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	var arg2 map[string]interface{}
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg2, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg2
	var arg3 firebasetools.FirebaseSimpleNotificationInput
	if tmp, ok := rawArgs["notification"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification"))
		arg3, err = ec.unmarshalNFirebaseSimpleNotificationInput2githubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseSimpleNotificationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["notification"] = arg3
	var arg4 *firebasetools.FirebaseAndroidConfigInput
	if tmp, ok := rawArgs["android"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("android"))
		arg4, err = ec.unmarshalOFirebaseAndroidConfigInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseAndroidConfigInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["android"] = arg4
	var arg5 *firebasetools.FirebaseAPNSConfigInput
	if tmp, ok := rawArgs["ios"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ios"))
		arg5, err = ec.unmarshalOFirebaseAPNSConfigInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseAPNSConfigInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ios"] = arg5
	var arg6 *firebasetools.FirebaseWebpushConfigInput
	if tmp, ok := rawArgs["web"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("web"))
		arg6, err = ec.unmarshalOFirebaseWebpushConfigInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseWebpushConfigInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["web"] = arg6
	return args, nil
}

func (ec *executionContext) field_Mutation_sendNotification_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []string
	if tmp, ok := rawArgs["registrationTokens"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationTokens"))
		arg0, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["registrationTokens"] = arg0
	var arg1 map[string]interface{}
	if tmp, ok := rawArgs["data"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
		arg1, err = ec.unmarshalNMap2map(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["data"] = arg1
	var arg2 firebasetools.FirebaseSimpleNotificationInput
	if tmp, ok := rawArgs["notification"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("notification"))
		arg2, err = ec.unmarshalNFirebaseSimpleNotificationInput2githubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseSimpleNotificationInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["notification"] = arg2
	var arg3 *firebasetools.FirebaseAndroidConfigInput
	if tmp, ok := rawArgs["android"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("android"))
		arg3, err = ec.unmarshalOFirebaseAndroidConfigInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseAndroidConfigInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["android"] = arg3
	var arg4 *firebasetools.FirebaseAPNSConfigInput
	if tmp, ok := rawArgs["ios"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("ios"))
		arg4, err = ec.unmarshalOFirebaseAPNSConfigInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseAPNSConfigInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["ios"] = arg4
	var arg5 *firebasetools.FirebaseWebpushConfigInput
	if tmp, ok := rawArgs["web"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("web"))
		arg5, err = ec.unmarshalOFirebaseWebpushConfigInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseWebpushConfigInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["web"] = arg5
	return args, nil
}

func (ec *executionContext) field_Mutation_sendToMany_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["message"] = arg0
	var arg1 []string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg1, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_send_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["message"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("message"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["message"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_showFeedItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_showNudge_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["nudgeID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("nudgeID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["nudgeID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_simpleEmail_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["subject"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("subject"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["subject"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["text"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["text"] = arg1
	var arg2 []string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg2, err = ec.unmarshalNString2ᚕstringᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg2
	return args, nil
}

func (ec *executionContext) field_Mutation_sladeOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["otp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otp"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["otp"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["marketingMessage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMessage"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketingMessage"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_unpinFeedItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_unresolveFeedItem_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["itemID"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("itemID"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["itemID"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_upload_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 profileutils.UploadInput
	if tmp, ok := rawArgs["input"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("input"))
		arg0, err = ec.unmarshalNUploadInput2githubᚗcomᚋsavannahghiᚋprofileutilsᚐUploadInput(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["input"] = arg0
	return args, nil
}

func (ec *executionContext) field_Mutation_verifyEmailOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["otp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otp"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["otp"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_verifyOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["msisdn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msisdn"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["msisdn"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["otp"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("otp"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["otp"] = arg1
	return args, nil
}

func (ec *executionContext) field_Mutation_virtualCards_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["wellnessCardFamily"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("wellnessCardFamily"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["wellnessCardFamily"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["virtualCardLink"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("virtualCardLink"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["virtualCardLink"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["marketingMessage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMessage"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketingMessage"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_visitStart_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["memberName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["benefitName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("benefitName"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["benefitName"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["locationName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationName"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["locationName"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["startTime"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("startTime"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["startTime"] = arg4
	var arg5 string
	if tmp, ok := rawArgs["balance"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("balance"))
		arg5, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["balance"] = arg5
	var arg6 string
	if tmp, ok := rawArgs["marketingMessage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMessage"))
		arg6, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketingMessage"] = arg6
	return args, nil
}

func (ec *executionContext) field_Mutation_wellnessCardActivationDependant_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["memberName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["cardName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardName"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cardName"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["marketingMessage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMessage"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketingMessage"] = arg3
	return args, nil
}

func (ec *executionContext) field_Mutation_wellnessCardActivationPrincipal_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["to"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("to"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["to"] = arg0
	var arg1 string
	if tmp, ok := rawArgs["memberName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("memberName"))
		arg1, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["memberName"] = arg1
	var arg2 string
	if tmp, ok := rawArgs["cardName"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("cardName"))
		arg2, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["cardName"] = arg2
	var arg3 string
	if tmp, ok := rawArgs["minorAgeThreshold"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("minorAgeThreshold"))
		arg3, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["minorAgeThreshold"] = arg3
	var arg4 string
	if tmp, ok := rawArgs["marketingMessage"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("marketingMessage"))
		arg4, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["marketingMessage"] = arg4
	return args, nil
}

func (ec *executionContext) field_Query___type_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["name"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["name"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query__entities_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 []map[string]interface{}
	if tmp, ok := rawArgs["representations"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("representations"))
		arg0, err = ec.unmarshalN_Any2ᚕmapᚄ(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["representations"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_emailVerificationOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_findUploadByID_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["id"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["id"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_generateAndEmailOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["msisdn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msisdn"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["msisdn"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["email"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["email"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["appId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_generateOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["msisdn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msisdn"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["msisdn"] = arg0
	var arg1 *string
	if tmp, ok := rawArgs["appId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
		arg1, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appId"] = arg1
	return args, nil
}

func (ec *executionContext) field_Query_generateRetryOTP_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["msisdn"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("msisdn"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["msisdn"] = arg0
	var arg1 int
	if tmp, ok := rawArgs["retryStep"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("retryStep"))
		arg1, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["retryStep"] = arg1
	var arg2 *string
	if tmp, ok := rawArgs["appId"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("appId"))
		arg2, err = ec.unmarshalOString2ᚖstring(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["appId"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_getFaqsContent_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_getFeed_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	var arg1 bool
	if tmp, ok := rawArgs["isAnonymous"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("isAnonymous"))
		arg1, err = ec.unmarshalNBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["isAnonymous"] = arg1
	var arg2 feedlib.BooleanFilter
	if tmp, ok := rawArgs["persistent"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("persistent"))
		arg2, err = ec.unmarshalNBooleanFilter2githubᚗcomᚋsavannahghiᚋfeedlibᚐBooleanFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["persistent"] = arg2
	var arg3 *feedlib.Status
	if tmp, ok := rawArgs["status"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("status"))
		arg3, err = ec.unmarshalOStatus2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐStatus(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["status"] = arg3
	var arg4 *feedlib.Visibility
	if tmp, ok := rawArgs["visibility"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("visibility"))
		arg4, err = ec.unmarshalOVisibility2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐVisibility(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["visibility"] = arg4
	var arg5 *feedlib.BooleanFilter
	if tmp, ok := rawArgs["expired"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("expired"))
		arg5, err = ec.unmarshalOBooleanFilter2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐBooleanFilter(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["expired"] = arg5
	var arg6 *helpers.FilterParams
	if tmp, ok := rawArgs["filterParams"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filterParams"))
		arg6, err = ec.unmarshalOFilterParamsInput2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋhelpersᚐFilterParams(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["filterParams"] = arg6
	return args, nil
}

func (ec *executionContext) field_Query_labels_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	return args, nil
}

func (ec *executionContext) field_Query_notifications_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 string
	if tmp, ok := rawArgs["registrationToken"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("registrationToken"))
		arg0, err = ec.unmarshalNString2string(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["registrationToken"] = arg0
	var arg1 time.Time
	if tmp, ok := rawArgs["newerThan"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("newerThan"))
		arg1, err = ec.unmarshalNTime2timeᚐTime(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["newerThan"] = arg1
	var arg2 int
	if tmp, ok := rawArgs["limit"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("limit"))
		arg2, err = ec.unmarshalNInt2int(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["limit"] = arg2
	return args, nil
}

func (ec *executionContext) field_Query_unreadPersistentItems_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 feedlib.Flavour
	if tmp, ok := rawArgs["flavour"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("flavour"))
		arg0, err = ec.unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["flavour"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_enumValues_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

func (ec *executionContext) field___Type_fields_args(ctx context.Context, rawArgs map[string]interface{}) (map[string]interface{}, error) {
	var err error
	args := map[string]interface{}{}
	var arg0 bool
	if tmp, ok := rawArgs["includeDeprecated"]; ok {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("includeDeprecated"))
		arg0, err = ec.unmarshalOBoolean2bool(ctx, tmp)
		if err != nil {
			return nil, err
		}
	}
	args["includeDeprecated"] = arg0
	return args, nil
}

// endregion ***************************** args.gotpl *****************************

// region    ************************** directives.gotpl **************************

// endregion ************************** directives.gotpl **************************

// region    **************************** field.gotpl *****************************

func (ec *executionContext) _AccessToken_jwt(ctx context.Context, field graphql.CollectedField, obj *dto.AccessToken) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessToken",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.JWT, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessToken_uniqueName(ctx context.Context, field graphql.CollectedField, obj *dto.AccessToken) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessToken",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UniqueName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessToken_sid(ctx context.Context, field graphql.CollectedField, obj *dto.AccessToken) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessToken",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessToken_dateUpdated(ctx context.Context, field graphql.CollectedField, obj *dto.AccessToken) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessToken",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateUpdated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessToken_status(ctx context.Context, field graphql.CollectedField, obj *dto.AccessToken) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessToken",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessToken_type(ctx context.Context, field graphql.CollectedField, obj *dto.AccessToken) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessToken",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessToken_maxParticipants(ctx context.Context, field graphql.CollectedField, obj *dto.AccessToken) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessToken",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MaxParticipants, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _AccessToken_duration(ctx context.Context, field graphql.CollectedField, obj *dto.AccessToken) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "AccessToken",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Duration, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*int)
	fc.Result = res
	return ec.marshalOInt2ᚖint(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_id(ctx context.Context, field graphql.CollectedField, obj *feedlib.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_sequenceNumber(ctx context.Context, field graphql.CollectedField, obj *feedlib.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SequenceNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_name(ctx context.Context, field graphql.CollectedField, obj *feedlib.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_icon(ctx context.Context, field graphql.CollectedField, obj *feedlib.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.Link)
	fc.Result = res
	return ec.marshalNLink2githubᚗcomᚋsavannahghiᚋfeedlibᚐLink(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_actionType(ctx context.Context, field graphql.CollectedField, obj *feedlib.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ActionType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.ActionType)
	fc.Result = res
	return ec.marshalNActionType2githubᚗcomᚋsavannahghiᚋfeedlibᚐActionType(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_handling(ctx context.Context, field graphql.CollectedField, obj *feedlib.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Handling, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.Handling)
	fc.Result = res
	return ec.marshalNHandling2githubᚗcomᚋsavannahghiᚋfeedlibᚐHandling(ctx, field.Selections, res)
}

func (ec *executionContext) _Action_allowAnonymous(ctx context.Context, field graphql.CollectedField, obj *feedlib.Action) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Action",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AllowAnonymous, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_id(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_anyoneCanAddSelf(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AnyoneCanAddSelf, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_attachments(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attachments, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*calendar.EventAttachment)
	fc.Result = res
	return ec.marshalNEventAttachment2ᚕᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventAttachmentᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_attendees(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Attendees, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*calendar.EventAttendee)
	fc.Result = res
	return ec.marshalNEventAttendee2ᚕᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventAttendeeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_attendeesOmitted(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AttendeesOmitted, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_colorId(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ColorId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_description(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_endTimeUnspecified(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EndTimeUnspecified, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_etag(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Etag, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_guestsCanInviteOthers(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GuestsCanInviteOthers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_guestsCanModify(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GuestsCanModify, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_guestsCanSeeOtherGuests(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.GuestsCanSeeOtherGuests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalOBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_hangoutLink(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HangoutLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_htmlLink(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HtmlLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_iCalUID(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ICalUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_kind(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_location(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_locked(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locked, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_originalStartTime(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OriginalStartTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*calendar.EventDateTime)
	fc.Result = res
	return ec.marshalOEventDateTime2ᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_privateCopy(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PrivateCopy, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_recurrence(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recurrence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_recurringEventId(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RecurringEventId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_sequence(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Sequence, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_start(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Start, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*calendar.EventDateTime)
	fc.Result = res
	return ec.marshalOEventDateTime2ᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_end(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.End, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*calendar.EventDateTime)
	fc.Result = res
	return ec.marshalOEventDateTime2ᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventDateTime(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_status(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_summary(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Summary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_transparency(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Transparency, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_updated(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Updated, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _CalendarEvent_visibility(ctx context.Context, field graphql.CollectedField, obj *calendar.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "CalendarEvent",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visibility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Context_userID(ctx context.Context, field graphql.CollectedField, obj *feedlib.Context) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UserID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Context_flavour(ctx context.Context, field graphql.CollectedField, obj *feedlib.Context) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Flavour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.Flavour)
	fc.Result = res
	return ec.marshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, field.Selections, res)
}

func (ec *executionContext) _Context_organizationID(ctx context.Context, field graphql.CollectedField, obj *feedlib.Context) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OrganizationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Context_locationID(ctx context.Context, field graphql.CollectedField, obj *feedlib.Context) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LocationID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Context_timestamp(ctx context.Context, field graphql.CollectedField, obj *feedlib.Context) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Context",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Dummy_id(ctx context.Context, field graphql.CollectedField, obj *dto.Dummy) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Dummy",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Dummy().ID(rctx, obj)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOID2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findAccessTokenByJwt(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findAccessTokenByJwt_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindAccessTokenByJwt(rctx, args["jwt"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.AccessToken)
	fc.Result = res
	return ec.marshalNAccessToken2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findDummyByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findDummyByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindDummyByID(rctx, args["id"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.Dummy)
	fc.Result = res
	return ec.marshalNDummy2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐDummy(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findFeedByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findFeedByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindFeedByID(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Feed)
	fc.Result = res
	return ec.marshalNFeed2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐFeed(ctx, field.Selections, res)
}

func (ec *executionContext) _Entity_findSavedNotificationByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Entity",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Entity_findSavedNotificationByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Entity().FindSavedNotificationByID(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.SavedNotification)
	fc.Result = res
	return ec.marshalNSavedNotification2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSavedNotification(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_id(ctx context.Context, field graphql.CollectedField, obj *feedlib.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_name(ctx context.Context, field graphql.CollectedField, obj *feedlib.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_context(ctx context.Context, field graphql.CollectedField, obj *feedlib.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Context, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(feedlib.Context)
	fc.Result = res
	return ec.marshalOContext2githubᚗcomᚋsavannahghiᚋfeedlibᚐContext(ctx, field.Selections, res)
}

func (ec *executionContext) _Event_payload(ctx context.Context, field graphql.CollectedField, obj *feedlib.Event) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Event",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Payload, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(feedlib.Payload)
	fc.Result = res
	return ec.marshalOPayload2githubᚗcomᚋsavannahghiᚋfeedlibᚐPayload(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttachment_fileID(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileId, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttachment_fileURL(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FileUrl, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttachment_iconLink(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IconLink, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttachment_mimeType(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MimeType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttachment_title(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttachment) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttachment",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttendee_id(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttendee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttendee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Id, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttendee_additionalGuests(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttendee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttendee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AdditionalGuests, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int64)
	fc.Result = res
	return ec.marshalNInt2int64(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttendee_comment(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttendee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttendee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Comment, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttendee_displayName(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttendee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttendee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DisplayName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttendee_email(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttendee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttendee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttendee_optional(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttendee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttendee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Optional, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttendee_organizer(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttendee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttendee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Organizer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttendee_resource(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttendee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttendee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Resource, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttendee_responseStatus(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttendee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttendee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResponseStatus, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventAttendee_self(ctx context.Context, field graphql.CollectedField, obj *calendar.EventAttendee) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventAttendee",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Self, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _EventDateTime_date(ctx context.Context, field graphql.CollectedField, obj *calendar.EventDateTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventDateTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Date, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventDateTime_dateTime(ctx context.Context, field graphql.CollectedField, obj *calendar.EventDateTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventDateTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DateTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _EventDateTime_timeZone(ctx context.Context, field graphql.CollectedField, obj *calendar.EventDateTime) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "EventDateTime",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TimeZone, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Feed_id(ctx context.Context, field graphql.CollectedField, obj *domain.Feed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Feed_sequenceNumber(ctx context.Context, field graphql.CollectedField, obj *domain.Feed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SequenceNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Feed_uid(ctx context.Context, field graphql.CollectedField, obj *domain.Feed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Feed_flavour(ctx context.Context, field graphql.CollectedField, obj *domain.Feed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Flavour, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.Flavour)
	fc.Result = res
	return ec.marshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx, field.Selections, res)
}

func (ec *executionContext) _Feed_actions(ctx context.Context, field graphql.CollectedField, obj *domain.Feed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]feedlib.Action)
	fc.Result = res
	return ec.marshalNAction2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐActionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Feed_nudges(ctx context.Context, field graphql.CollectedField, obj *domain.Feed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Nudges, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]feedlib.Nudge)
	fc.Result = res
	return ec.marshalNNudge2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐNudgeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Feed_items(ctx context.Context, field graphql.CollectedField, obj *domain.Feed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Items, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]feedlib.Item)
	fc.Result = res
	return ec.marshalNItem2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐItemᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Feed_isAnonymous(ctx context.Context, field graphql.CollectedField, obj *domain.Feed) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feed",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsAnonymous, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*bool)
	fc.Result = res
	return ec.marshalNBoolean2ᚖbool(ctx, field.Selections, res)
}

func (ec *executionContext) _Feedback_question(ctx context.Context, field graphql.CollectedField, obj *dto.Feedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feedback",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Question, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Feedback_answer(ctx context.Context, field graphql.CollectedField, obj *dto.Feedback) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Feedback",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Answer, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FilterParams_labels(ctx context.Context, field graphql.CollectedField, obj *helpers.FilterParams) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FilterParams",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Labels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FirebaseAPNSConfig_headers(ctx context.Context, field graphql.CollectedField, obj *dto.FirebaseAPNSConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FirebaseAPNSConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Headers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _FirebaseAndroidConfig_collapseKey(ctx context.Context, field graphql.CollectedField, obj *dto.FirebaseAndroidConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FirebaseAndroidConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CollapseKey, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FirebaseAndroidConfig_priority(ctx context.Context, field graphql.CollectedField, obj *dto.FirebaseAndroidConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FirebaseAndroidConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Priority, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FirebaseAndroidConfig_restrictedPackageName(ctx context.Context, field graphql.CollectedField, obj *dto.FirebaseAndroidConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FirebaseAndroidConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RestrictedPackageName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalNString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FirebaseAndroidConfig_data(ctx context.Context, field graphql.CollectedField, obj *dto.FirebaseAndroidConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FirebaseAndroidConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _FirebaseSimpleNotification_title(ctx context.Context, field graphql.CollectedField, obj *dto.FirebaseSimpleNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FirebaseSimpleNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FirebaseSimpleNotification_body(ctx context.Context, field graphql.CollectedField, obj *dto.FirebaseSimpleNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FirebaseSimpleNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Body, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _FirebaseSimpleNotification_imageURL(ctx context.Context, field graphql.CollectedField, obj *dto.FirebaseSimpleNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FirebaseSimpleNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ImageURL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _FirebaseSimpleNotification_data(ctx context.Context, field graphql.CollectedField, obj *dto.FirebaseSimpleNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FirebaseSimpleNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _FirebaseWebpushConfig_headers(ctx context.Context, field graphql.CollectedField, obj *dto.FirebaseWebpushConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FirebaseWebpushConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Headers, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _FirebaseWebpushConfig_data(ctx context.Context, field graphql.CollectedField, obj *dto.FirebaseWebpushConfig) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "FirebaseWebpushConfig",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSAuthor_id(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSAuthor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSAuthor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSAuthor_name(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSAuthor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSAuthor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSAuthor_slug(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSAuthor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSAuthor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSAuthor_url(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSAuthor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSAuthor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSAuthor_profileImage(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSAuthor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSAuthor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ProfileImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSAuthor_website(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSAuthor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSAuthor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Website, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSAuthor_location(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSAuthor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSAuthor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Location, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSAuthor_facebook(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSAuthor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSAuthor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Facebook, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSAuthor_twitter(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSAuthor) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSAuthor",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Twitter, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_id(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_slug(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_uuid(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_title(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_html(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HTML, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_excerpt(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Excerpt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_url(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_featureImage(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.FeatureImage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_readingTime(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReadingTime, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_tags(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tags, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]domain.GhostCMSTag)
	fc.Result = res
	return ec.marshalNGhostCMSTag2ᚕgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐGhostCMSTagᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_createdAt(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CreatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_publishedAt(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublishedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_updatedAt(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UpdatedAt, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSPost_commentID(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSPost) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSPost",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.CommentID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSTag_id(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSTag_name(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSTag_slug(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Slug, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSTag_description(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSTag_visibility(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visibility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _GhostCMSTag_url(ctx context.Context, field graphql.CollectedField, obj *domain.GhostCMSTag) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "GhostCMSTag",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_id(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_sequenceNumber(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SequenceNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_expiry(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expiry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_persistent(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Persistent, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_status(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.Status)
	fc.Result = res
	return ec.marshalNStatus2githubᚗcomᚋsavannahghiᚋfeedlibᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_visibility(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visibility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.Visibility)
	fc.Result = res
	return ec.marshalNVisibility2githubᚗcomᚋsavannahghiᚋfeedlibᚐVisibility(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_icon(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Icon, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.Link)
	fc.Result = res
	return ec.marshalNLink2githubᚗcomᚋsavannahghiᚋfeedlibᚐLink(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_author(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Author, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_tagline(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Tagline, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_label(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Label, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_timestamp(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_summary(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Summary, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_text(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_textType(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.TextType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.TextType)
	fc.Result = res
	return ec.marshalNTextType2githubᚗcomᚋsavannahghiᚋfeedlibᚐTextType(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_links(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Links, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]feedlib.Link)
	fc.Result = res
	return ec.marshalOLink2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐLink(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_actions(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]feedlib.Action)
	fc.Result = res
	return ec.marshalOAction2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐAction(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_conversations(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Conversations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]feedlib.Message)
	fc.Result = res
	return ec.marshalOMsg2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_users(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_groups(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Groups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Item_notificationChannels(ctx context.Context, field graphql.CollectedField, obj *feedlib.Item) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Item",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationChannels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]feedlib.Channel)
	fc.Result = res
	return ec.marshalOChannel2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_id(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_url(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_linkType(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.LinkType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.LinkType)
	fc.Result = res
	return ec.marshalNLinkType2githubᚗcomᚋsavannahghiᚋfeedlibᚐLinkType(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_title(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_description(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Link_thumbnail(ctx context.Context, field graphql.CollectedField, obj *feedlib.Link) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Link",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Thumbnail, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Msg_id(ctx context.Context, field graphql.CollectedField, obj *feedlib.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Msg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Msg_sequenceNumber(ctx context.Context, field graphql.CollectedField, obj *feedlib.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Msg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SequenceNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Msg_text(ctx context.Context, field graphql.CollectedField, obj *feedlib.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Msg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Msg_replyTo(ctx context.Context, field graphql.CollectedField, obj *feedlib.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Msg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ReplyTo, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Msg_postedByUID(ctx context.Context, field graphql.CollectedField, obj *feedlib.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Msg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostedByUID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Msg_postedByName(ctx context.Context, field graphql.CollectedField, obj *feedlib.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Msg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PostedByName, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Msg_timestamp(ctx context.Context, field graphql.CollectedField, obj *feedlib.Message) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Msg",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_testFeature(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().TestFeature(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sendNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sendNotification_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendNotification(rctx, args["registrationTokens"].([]string), args["data"].(map[string]interface{}), args["notification"].(firebasetools.FirebaseSimpleNotificationInput), args["android"].(*firebasetools.FirebaseAndroidConfigInput), args["ios"].(*firebasetools.FirebaseAPNSConfigInput), args["web"].(*firebasetools.FirebaseWebpushConfigInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sendFCMByPhoneOrEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sendFCMByPhoneOrEmail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendFCMByPhoneOrEmail(rctx, args["phoneNumber"].(*string), args["email"].(*string), args["data"].(map[string]interface{}), args["notification"].(firebasetools.FirebaseSimpleNotificationInput), args["android"].(*firebasetools.FirebaseAndroidConfigInput), args["ios"].(*firebasetools.FirebaseAPNSConfigInput), args["web"].(*firebasetools.FirebaseWebpushConfigInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_resolveFeedItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_resolveFeedItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ResolveFeedItem(rctx, args["flavour"].(feedlib.Flavour), args["itemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*feedlib.Item)
	fc.Result = res
	return ec.marshalNItem2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_unresolveFeedItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_unresolveFeedItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnresolveFeedItem(rctx, args["flavour"].(feedlib.Flavour), args["itemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*feedlib.Item)
	fc.Result = res
	return ec.marshalNItem2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_pinFeedItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_pinFeedItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PinFeedItem(rctx, args["flavour"].(feedlib.Flavour), args["itemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*feedlib.Item)
	fc.Result = res
	return ec.marshalNItem2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_unpinFeedItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_unpinFeedItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().UnpinFeedItem(rctx, args["flavour"].(feedlib.Flavour), args["itemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*feedlib.Item)
	fc.Result = res
	return ec.marshalNItem2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_hideFeedItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_hideFeedItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().HideFeedItem(rctx, args["flavour"].(feedlib.Flavour), args["itemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*feedlib.Item)
	fc.Result = res
	return ec.marshalNItem2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_showFeedItem(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_showFeedItem_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ShowFeedItem(rctx, args["flavour"].(feedlib.Flavour), args["itemID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*feedlib.Item)
	fc.Result = res
	return ec.marshalNItem2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐItem(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_hideNudge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_hideNudge_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().HideNudge(rctx, args["flavour"].(feedlib.Flavour), args["nudgeID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*feedlib.Nudge)
	fc.Result = res
	return ec.marshalNNudge2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐNudge(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_showNudge(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_showNudge_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ShowNudge(rctx, args["flavour"].(feedlib.Flavour), args["nudgeID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*feedlib.Nudge)
	fc.Result = res
	return ec.marshalNNudge2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐNudge(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_postMessage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_postMessage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PostMessage(rctx, args["flavour"].(feedlib.Flavour), args["itemID"].(string), args["message"].(feedlib.Message))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*feedlib.Message)
	fc.Result = res
	return ec.marshalNMsg2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐMessage(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_deleteMessage(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_deleteMessage_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().DeleteMessage(rctx, args["flavour"].(feedlib.Flavour), args["itemID"].(string), args["messageID"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_processEvent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_processEvent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ProcessEvent(rctx, args["flavour"].(feedlib.Flavour), args["event"].(feedlib.Event))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_simpleEmail(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_simpleEmail_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SimpleEmail(rctx, args["subject"].(string), args["text"].(string), args["to"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_verifyOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_verifyOTP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifyOtp(rctx, args["msisdn"].(string), args["otp"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_verifyEmailOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_verifyEmailOTP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VerifyEmailOtp(rctx, args["email"].(string), args["otp"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_send(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_send_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Send(rctx, args["to"].(string), args["message"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.SendMessageResponse)
	fc.Result = res
	return ec.marshalNSendMessageResponse2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSendMessageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sendToMany(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sendToMany_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SendToMany(rctx, args["message"].(string), args["to"].([]string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.SendMessageResponse)
	fc.Result = res
	return ec.marshalNSendMessageResponse2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSendMessageResponse(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_recordNPSResponse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_recordNPSResponse_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().RecordNPSResponse(rctx, args["input"].(dto.NPSInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_upload(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_upload_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().Upload(rctx, args["input"].(profileutils.UploadInput))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.Upload)
	fc.Result = res
	return ec.marshalNUpload2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_phoneNumberVerificationCode(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_phoneNumberVerificationCode_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PhoneNumberVerificationCode(rctx, args["to"].(string), args["code"].(string), args["marketingMessage"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_wellnessCardActivationDependant(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_wellnessCardActivationDependant_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().WellnessCardActivationDependant(rctx, args["to"].(string), args["memberName"].(string), args["cardName"].(string), args["marketingMessage"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_wellnessCardActivationPrincipal(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_wellnessCardActivationPrincipal_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().WellnessCardActivationPrincipal(rctx, args["to"].(string), args["memberName"].(string), args["cardName"].(string), args["minorAgeThreshold"].(string), args["marketingMessage"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_billNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_billNotification_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().BillNotification(rctx, args["to"].(string), args["productName"].(string), args["billingPeriod"].(string), args["billAmount"].(string), args["paymentInstruction"].(string), args["marketingMessage"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_virtualCards(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_virtualCards_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VirtualCards(rctx, args["to"].(string), args["wellnessCardFamily"].(string), args["virtualCardLink"].(string), args["marketingMessage"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_visitStart(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_visitStart_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().VisitStart(rctx, args["to"].(string), args["memberName"].(string), args["benefitName"].(string), args["locationName"].(string), args["startTime"].(string), args["balance"].(string), args["marketingMessage"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_claimNotification(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_claimNotification_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().ClaimNotification(rctx, args["to"].(string), args["claimReference"].(string), args["claimTypeParenthesized"].(string), args["provider"].(string), args["visitType"].(string), args["claimTime"].(string), args["marketingMessage"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_preauthApproval(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_preauthApproval_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PreauthApproval(rctx, args["to"].(string), args["currency"].(string), args["amount"].(string), args["benefit"].(string), args["provider"].(string), args["member"].(string), args["careContact"].(string), args["marketingMessage"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_preauthRequest(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_preauthRequest_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().PreauthRequest(rctx, args["to"].(string), args["currency"].(string), args["amount"].(string), args["benefit"].(string), args["provider"].(string), args["requestTime"].(string), args["member"].(string), args["careContact"].(string), args["marketingMessage"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _Mutation_sladeOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Mutation",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Mutation_sladeOTP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Mutation().SladeOtp(rctx, args["to"].(string), args["name"].(string), args["otp"].(string), args["marketingMessage"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) _NPSResponse_id(ctx context.Context, field graphql.CollectedField, obj *dto.NPSResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NPSResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NPSResponse_name(ctx context.Context, field graphql.CollectedField, obj *dto.NPSResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NPSResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NPSResponse_score(ctx context.Context, field graphql.CollectedField, obj *dto.NPSResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NPSResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Score, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _NPSResponse_sladeCode(ctx context.Context, field graphql.CollectedField, obj *dto.NPSResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NPSResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SladeCode, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NPSResponse_email(ctx context.Context, field graphql.CollectedField, obj *dto.NPSResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NPSResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Email, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NPSResponse_msisdn(ctx context.Context, field graphql.CollectedField, obj *dto.NPSResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NPSResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MSISDN, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) _NPSResponse_feedback(ctx context.Context, field graphql.CollectedField, obj *dto.NPSResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NPSResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Feedback, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]dto.Feedback)
	fc.Result = res
	return ec.marshalOFeedback2ᚕgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFeedback(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationBody_publishMessage(ctx context.Context, field graphql.CollectedField, obj *feedlib.NotificationBody) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NotificationBody",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PublishMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationBody_deleteMessage(ctx context.Context, field graphql.CollectedField, obj *feedlib.NotificationBody) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NotificationBody",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeleteMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationBody_resolveMessage(ctx context.Context, field graphql.CollectedField, obj *feedlib.NotificationBody) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NotificationBody",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ResolveMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationBody_unresolveMessage(ctx context.Context, field graphql.CollectedField, obj *feedlib.NotificationBody) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NotificationBody",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.UnresolveMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationBody_showMessage(ctx context.Context, field graphql.CollectedField, obj *feedlib.NotificationBody) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NotificationBody",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ShowMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _NotificationBody_hideMessage(ctx context.Context, field graphql.CollectedField, obj *feedlib.NotificationBody) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "NotificationBody",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.HideMessage, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_id(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_sequenceNumber(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SequenceNumber, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_visibility(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Visibility, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.Visibility)
	fc.Result = res
	return ec.marshalNVisibility2githubᚗcomᚋsavannahghiᚋfeedlibᚐVisibility(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_status(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(feedlib.Status)
	fc.Result = res
	return ec.marshalNStatus2githubᚗcomᚋsavannahghiᚋfeedlibᚐStatus(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_expiry(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Expiry, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalOTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_title(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_text(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Text, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_actions(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Actions, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]feedlib.Action)
	fc.Result = res
	return ec.marshalNAction2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐActionᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_groups(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Groups, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_users(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Users, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalOString2ᚕstring(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_links(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Links, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]feedlib.Link)
	fc.Result = res
	return ec.marshalOLink2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐLink(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_notificationChannels(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationChannels, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]feedlib.Channel)
	fc.Result = res
	return ec.marshalOChannel2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐChannel(ctx, field.Selections, res)
}

func (ec *executionContext) _Nudge_notificationBody(ctx context.Context, field graphql.CollectedField, obj *feedlib.Nudge) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Nudge",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.NotificationBody, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(feedlib.NotificationBody)
	fc.Result = res
	return ec.marshalONotificationBody2githubᚗcomᚋsavannahghiᚋfeedlibᚐNotificationBody(ctx, field.Selections, res)
}

func (ec *executionContext) _Payload_data(ctx context.Context, field graphql.CollectedField, obj *feedlib.Payload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Payload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getLibraryContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetLibraryContent(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.GhostCMSPost)
	fc.Result = res
	return ec.marshalNGhostCMSPost2ᚕᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐGhostCMSPostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getFaqsContent(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getFaqsContent_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetFaqsContent(rctx, args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*domain.GhostCMSPost)
	fc.Result = res
	return ec.marshalNGhostCMSPost2ᚕᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐGhostCMSPostᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_notifications(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_notifications_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Notifications(rctx, args["registrationToken"].(string), args["newerThan"].(time.Time), args["limit"].(int))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*dto.SavedNotification)
	fc.Result = res
	return ec.marshalNSavedNotification2ᚕᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSavedNotificationᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_getFeed(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_getFeed_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GetFeed(rctx, args["flavour"].(feedlib.Flavour), args["isAnonymous"].(bool), args["persistent"].(feedlib.BooleanFilter), args["status"].(*feedlib.Status), args["visibility"].(*feedlib.Visibility), args["expired"].(*feedlib.BooleanFilter), args["filterParams"].(*helpers.FilterParams))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*domain.Feed)
	fc.Result = res
	return ec.marshalNFeed2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐFeed(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_labels(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_labels_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().Labels(rctx, args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalNString2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_unreadPersistentItems(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_unreadPersistentItems_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().UnreadPersistentItems(rctx, args["flavour"].(feedlib.Flavour))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_generateOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_generateOTP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GenerateOtp(rctx, args["msisdn"].(string), args["appId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_generateAndEmailOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_generateAndEmailOTP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GenerateAndEmailOtp(rctx, args["msisdn"].(string), args["email"].(*string), args["appId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_generateRetryOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_generateRetryOTP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().GenerateRetryOtp(rctx, args["msisdn"].(string), args["retryStep"].(int), args["appId"].(*string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_emailVerificationOTP(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_emailVerificationOTP_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().EmailVerificationOtp(rctx, args["email"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_listNPSResponse(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().ListNPSResponse(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]*dto.NPSResponse)
	fc.Result = res
	return ec.marshalNNPSResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐNPSResponseᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_twilioAccessToken(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().TwilioAccessToken(rctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.AccessToken)
	fc.Result = res
	return ec.marshalNAccessToken2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐAccessToken(ctx, field.Selections, res)
}

func (ec *executionContext) _Query_findUploadByID(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: true,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query_findUploadByID_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.resolvers.Query().FindUploadByID(rctx, args["id"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*profileutils.Upload)
	fc.Result = res
	return ec.marshalNUpload2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUpload(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__entities(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query__entities_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve_entities(ctx, args["representations"].([]map[string]interface{}))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]fedruntime.Entity)
	fc.Result = res
	return ec.marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, field.Selections, res)
}

func (ec *executionContext) _Query__service(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.__resolve__service(ctx)
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(fedruntime.Service)
	fc.Result = res
	return ec.marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___type(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field_Query___type_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectType(args["name"].(string))
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) _Query___schema(ctx context.Context, field graphql.CollectedField) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Query",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return ec.introspectSchema()
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Schema)
	fc.Result = res
	return ec.marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipient_number(ctx context.Context, field graphql.CollectedField, obj *dto.Recipient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Number, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipient_cost(ctx context.Context, field graphql.CollectedField, obj *dto.Recipient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Cost, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipient_status(ctx context.Context, field graphql.CollectedField, obj *dto.Recipient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Status, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Recipient_messageID(ctx context.Context, field graphql.CollectedField, obj *dto.Recipient) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Recipient",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SMS_recipients(ctx context.Context, field graphql.CollectedField, obj *dto.SMS) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SMS",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Recipients, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]dto.Recipient)
	fc.Result = res
	return ec.marshalNRecipient2ᚕgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐRecipientᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedNotification_id(ctx context.Context, field graphql.CollectedField, obj *dto.SavedNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedNotification_registrationToken(ctx context.Context, field graphql.CollectedField, obj *dto.SavedNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.RegistrationToken, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedNotification_messageID(ctx context.Context, field graphql.CollectedField, obj *dto.SavedNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MessageID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedNotification_timestamp(ctx context.Context, field graphql.CollectedField, obj *dto.SavedNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Timestamp, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedNotification_data(ctx context.Context, field graphql.CollectedField, obj *dto.SavedNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(map[string]interface{})
	fc.Result = res
	return ec.marshalOMap2map(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedNotification_notification(ctx context.Context, field graphql.CollectedField, obj *dto.SavedNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Notification, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.FirebaseSimpleNotification)
	fc.Result = res
	return ec.marshalOFirebaseSimpleNotification2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFirebaseSimpleNotification(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedNotification_androidConfig(ctx context.Context, field graphql.CollectedField, obj *dto.SavedNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.AndroidConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.FirebaseAndroidConfig)
	fc.Result = res
	return ec.marshalOFirebaseAndroidConfig2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFirebaseAndroidConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedNotification_webpushConfig(ctx context.Context, field graphql.CollectedField, obj *dto.SavedNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.WebpushConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.FirebaseWebpushConfig)
	fc.Result = res
	return ec.marshalOFirebaseWebpushConfig2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFirebaseWebpushConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _SavedNotification_apnsConfig(ctx context.Context, field graphql.CollectedField, obj *dto.SavedNotification) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SavedNotification",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.APNSConfig, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*dto.FirebaseAPNSConfig)
	fc.Result = res
	return ec.marshalOFirebaseAPNSConfig2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFirebaseAPNSConfig(ctx, field.Selections, res)
}

func (ec *executionContext) _SendMessageResponse_SMSMessageData(ctx context.Context, field graphql.CollectedField, obj *dto.SendMessageResponse) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "SendMessageResponse",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SMSMessageData, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*dto.SMS)
	fc.Result = res
	return ec.marshalNSMS2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSMS(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_id(ctx context.Context, field graphql.CollectedField, obj *profileutils.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ID, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNID2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_url(ctx context.Context, field graphql.CollectedField, obj *profileutils.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.URL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_size(ctx context.Context, field graphql.CollectedField, obj *profileutils.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Size, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(int)
	fc.Result = res
	return ec.marshalNInt2int(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_hash(ctx context.Context, field graphql.CollectedField, obj *profileutils.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Hash, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_creation(ctx context.Context, field graphql.CollectedField, obj *profileutils.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Creation, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(time.Time)
	fc.Result = res
	return ec.marshalNTime2timeᚐTime(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_title(ctx context.Context, field graphql.CollectedField, obj *profileutils.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Title, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_contentType(ctx context.Context, field graphql.CollectedField, obj *profileutils.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.ContentType, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_language(ctx context.Context, field graphql.CollectedField, obj *profileutils.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Language, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) _Upload_base64data(ctx context.Context, field graphql.CollectedField, obj *profileutils.Upload) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "Upload",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Base64data, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) __Service_sdl(ctx context.Context, field graphql.CollectedField, obj *fedruntime.Service) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "_Service",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SDL, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_locations(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Locations, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]string)
	fc.Result = res
	return ec.marshalN__DirectiveLocation2ᚕstringᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Directive_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Directive) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Directive",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___EnumValue_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.EnumValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__EnumValue",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_args(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Args, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_type(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_isDeprecated(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.IsDeprecated(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(bool)
	fc.Result = res
	return ec.marshalNBoolean2bool(ctx, field.Selections, res)
}

func (ec *executionContext) ___Field_deprecationReason(ctx context.Context, field graphql.CollectedField, obj *introspection.Field) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Field",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DeprecationReason(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_name(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalNString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_description(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_type(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Type, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___InputValue_defaultValue(ctx context.Context, field graphql.CollectedField, obj *introspection.InputValue) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__InputValue",
		Field:      field,
		Args:       nil,
		IsMethod:   false,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.DefaultValue, nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_types(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Types(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_queryType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.QueryType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_mutationType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.MutationType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_subscriptionType(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.SubscriptionType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

func (ec *executionContext) ___Schema_directives(ctx context.Context, field graphql.CollectedField, obj *introspection.Schema) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Schema",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Directives(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.([]introspection.Directive)
	fc.Result = res
	return ec.marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_kind(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Kind(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		if !graphql.HasFieldError(ctx, fc) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalN__TypeKind2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_name(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Name(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*string)
	fc.Result = res
	return ec.marshalOString2ᚖstring(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_description(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Description(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(string)
	fc.Result = res
	return ec.marshalOString2string(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_fields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_fields_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Fields(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Field)
	fc.Result = res
	return ec.marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_interfaces(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.Interfaces(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_possibleTypes(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.PossibleTypes(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_enumValues(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	rawArgs := field.ArgumentMap(ec.Variables)
	args, err := ec.field___Type_enumValues_args(ctx, rawArgs)
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	fc.Args = args
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.EnumValues(args["includeDeprecated"].(bool)), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.EnumValue)
	fc.Result = res
	return ec.marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_inputFields(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.InputFields(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.([]introspection.InputValue)
	fc.Result = res
	return ec.marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx, field.Selections, res)
}

func (ec *executionContext) ___Type_ofType(ctx context.Context, field graphql.CollectedField, obj *introspection.Type) (ret graphql.Marshaler) {
	defer func() {
		if r := recover(); r != nil {
			ec.Error(ctx, ec.Recover(ctx, r))
			ret = graphql.Null
		}
	}()
	fc := &graphql.FieldContext{
		Object:     "__Type",
		Field:      field,
		Args:       nil,
		IsMethod:   true,
		IsResolver: false,
	}

	ctx = graphql.WithFieldContext(ctx, fc)
	resTmp, err := ec.ResolverMiddleware(ctx, func(rctx context.Context) (interface{}, error) {
		ctx = rctx // use context from middleware stack in children
		return obj.OfType(), nil
	})
	if err != nil {
		ec.Error(ctx, err)
		return graphql.Null
	}
	if resTmp == nil {
		return graphql.Null
	}
	res := resTmp.(*introspection.Type)
	fc.Result = res
	return ec.marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, field.Selections, res)
}

// endregion **************************** field.gotpl *****************************

// region    **************************** input.gotpl *****************************

func (ec *executionContext) unmarshalInputContextInput(ctx context.Context, obj interface{}) (feedlib.Context, error) {
	var it feedlib.Context
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "userID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("userID"))
			it.UserID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "organizationID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("organizationID"))
			it.OrganizationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "locationID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("locationID"))
			it.LocationID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestamp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestamp"))
			it.Timestamp, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputEventInput(ctx context.Context, obj interface{}) (feedlib.Event, error) {
	var it feedlib.Event
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "context":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("context"))
			it.Context, err = ec.unmarshalNContextInput2githubᚗcomᚋsavannahghiᚋfeedlibᚐContext(ctx, v)
			if err != nil {
				return it, err
			}
		case "payload":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("payload"))
			it.Payload, err = ec.unmarshalNPayloadInput2githubᚗcomᚋsavannahghiᚋfeedlibᚐPayload(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFeedbackInput(ctx context.Context, obj interface{}) (dto.FeedbackInput, error) {
	var it dto.FeedbackInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "question":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("question"))
			it.Question, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "answer":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("answer"))
			it.Answer, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFilterParamsInput(ctx context.Context, obj interface{}) (helpers.FilterParams, error) {
	var it helpers.FilterParams
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "labels":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("labels"))
			it.Labels, err = ec.unmarshalOString2ᚕstring(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFirebaseAPNSConfigInput(ctx context.Context, obj interface{}) (firebasetools.FirebaseAPNSConfigInput, error) {
	var it firebasetools.FirebaseAPNSConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "headers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("headers"))
			it.Headers, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFirebaseAndroidConfigInput(ctx context.Context, obj interface{}) (firebasetools.FirebaseAndroidConfigInput, error) {
	var it firebasetools.FirebaseAndroidConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "priority":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("priority"))
			it.Priority, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "collapseKey":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("collapseKey"))
			it.CollapseKey, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "restrictedPackageName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("restrictedPackageName"))
			it.RestrictedPackageName, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFirebaseSimpleNotificationInput(ctx context.Context, obj interface{}) (firebasetools.FirebaseSimpleNotificationInput, error) {
	var it firebasetools.FirebaseSimpleNotificationInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "body":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("body"))
			it.Body, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "imageURL":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("imageURL"))
			it.ImageURL, err = ec.unmarshalNString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputFirebaseWebpushConfigInput(ctx context.Context, obj interface{}) (firebasetools.FirebaseWebpushConfigInput, error) {
	var it firebasetools.FirebaseWebpushConfigInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "headers":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("headers"))
			it.Headers, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalOMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputMsgInput(ctx context.Context, obj interface{}) (feedlib.Message, error) {
	var it feedlib.Message
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "id":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("id"))
			it.ID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "sequenceNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sequenceNumber"))
			it.SequenceNumber, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "text":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("text"))
			it.Text, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "replyTo":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("replyTo"))
			it.ReplyTo, err = ec.unmarshalOString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "postedByUID":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postedByUID"))
			it.PostedByUID, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "postedByName":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("postedByName"))
			it.PostedByName, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "timestamp":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("timestamp"))
			it.Timestamp, err = ec.unmarshalNTime2timeᚐTime(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputNPSInput(ctx context.Context, obj interface{}) (dto.NPSInput, error) {
	var it dto.NPSInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "name":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("name"))
			it.Name, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "score":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("score"))
			it.Score, err = ec.unmarshalNInt2int(ctx, v)
			if err != nil {
				return it, err
			}
		case "sladeCode":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("sladeCode"))
			it.SladeCode, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "email":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("email"))
			it.Email, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "phoneNumber":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("phoneNumber"))
			it.PhoneNumber, err = ec.unmarshalOString2ᚖstring(ctx, v)
			if err != nil {
				return it, err
			}
		case "feedback":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("feedback"))
			it.Feedback, err = ec.unmarshalOFeedbackInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFeedbackInput(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputPayloadInput(ctx context.Context, obj interface{}) (feedlib.Payload, error) {
	var it feedlib.Payload
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("data"))
			it.Data, err = ec.unmarshalNMap2map(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

func (ec *executionContext) unmarshalInputUploadInput(ctx context.Context, obj interface{}) (profileutils.UploadInput, error) {
	var it profileutils.UploadInput
	var asMap = obj.(map[string]interface{})

	for k, v := range asMap {
		switch k {
		case "title":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("title"))
			it.Title, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "contentType":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("contentType"))
			it.ContentType, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "language":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("language"))
			it.Language, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "base64data":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("base64data"))
			it.Base64data, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		case "filename":
			var err error

			ctx := graphql.WithPathContext(ctx, graphql.NewPathWithField("filename"))
			it.Filename, err = ec.unmarshalNString2string(ctx, v)
			if err != nil {
				return it, err
			}
		}
	}

	return it, nil
}

// endregion **************************** input.gotpl *****************************

// region    ************************** interface.gotpl ***************************

func (ec *executionContext) __Entity(ctx context.Context, sel ast.SelectionSet, obj fedruntime.Entity) graphql.Marshaler {
	switch obj := (obj).(type) {
	case nil:
		return graphql.Null
	case dto.AccessToken:
		return ec._AccessToken(ctx, sel, &obj)
	case *dto.AccessToken:
		if obj == nil {
			return graphql.Null
		}
		return ec._AccessToken(ctx, sel, obj)
	case dto.Dummy:
		return ec._Dummy(ctx, sel, &obj)
	case *dto.Dummy:
		if obj == nil {
			return graphql.Null
		}
		return ec._Dummy(ctx, sel, obj)
	case domain.Feed:
		return ec._Feed(ctx, sel, &obj)
	case *domain.Feed:
		if obj == nil {
			return graphql.Null
		}
		return ec._Feed(ctx, sel, obj)
	case dto.SavedNotification:
		return ec._SavedNotification(ctx, sel, &obj)
	case *dto.SavedNotification:
		if obj == nil {
			return graphql.Null
		}
		return ec._SavedNotification(ctx, sel, obj)
	default:
		panic(fmt.Errorf("unexpected type %T", obj))
	}
}

// endregion ************************** interface.gotpl ***************************

// region    **************************** object.gotpl ****************************

var accessTokenImplementors = []string{"AccessToken", "_Entity"}

func (ec *executionContext) _AccessToken(ctx context.Context, sel ast.SelectionSet, obj *dto.AccessToken) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, accessTokenImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("AccessToken")
		case "jwt":
			out.Values[i] = ec._AccessToken_jwt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uniqueName":
			out.Values[i] = ec._AccessToken_uniqueName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sid":
			out.Values[i] = ec._AccessToken_sid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateUpdated":
			out.Values[i] = ec._AccessToken_dateUpdated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._AccessToken_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec._AccessToken_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "maxParticipants":
			out.Values[i] = ec._AccessToken_maxParticipants(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "duration":
			out.Values[i] = ec._AccessToken_duration(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var actionImplementors = []string{"Action"}

func (ec *executionContext) _Action(ctx context.Context, sel ast.SelectionSet, obj *feedlib.Action) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, actionImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Action")
		case "id":
			out.Values[i] = ec._Action_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sequenceNumber":
			out.Values[i] = ec._Action_sequenceNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Action_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":
			out.Values[i] = ec._Action_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actionType":
			out.Values[i] = ec._Action_actionType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "handling":
			out.Values[i] = ec._Action_handling(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "allowAnonymous":
			out.Values[i] = ec._Action_allowAnonymous(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var calendarEventImplementors = []string{"CalendarEvent"}

func (ec *executionContext) _CalendarEvent(ctx context.Context, sel ast.SelectionSet, obj *calendar.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, calendarEventImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("CalendarEvent")
		case "id":
			out.Values[i] = ec._CalendarEvent_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "anyoneCanAddSelf":
			out.Values[i] = ec._CalendarEvent_anyoneCanAddSelf(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attachments":
			out.Values[i] = ec._CalendarEvent_attachments(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attendees":
			out.Values[i] = ec._CalendarEvent_attendees(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "attendeesOmitted":
			out.Values[i] = ec._CalendarEvent_attendeesOmitted(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "colorId":
			out.Values[i] = ec._CalendarEvent_colorId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._CalendarEvent_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "endTimeUnspecified":
			out.Values[i] = ec._CalendarEvent_endTimeUnspecified(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "etag":
			out.Values[i] = ec._CalendarEvent_etag(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "guestsCanInviteOthers":
			out.Values[i] = ec._CalendarEvent_guestsCanInviteOthers(ctx, field, obj)
		case "guestsCanModify":
			out.Values[i] = ec._CalendarEvent_guestsCanModify(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "guestsCanSeeOtherGuests":
			out.Values[i] = ec._CalendarEvent_guestsCanSeeOtherGuests(ctx, field, obj)
		case "hangoutLink":
			out.Values[i] = ec._CalendarEvent_hangoutLink(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "htmlLink":
			out.Values[i] = ec._CalendarEvent_htmlLink(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iCalUID":
			out.Values[i] = ec._CalendarEvent_iCalUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "kind":
			out.Values[i] = ec._CalendarEvent_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "location":
			out.Values[i] = ec._CalendarEvent_location(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locked":
			out.Values[i] = ec._CalendarEvent_locked(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "originalStartTime":
			out.Values[i] = ec._CalendarEvent_originalStartTime(ctx, field, obj)
		case "privateCopy":
			out.Values[i] = ec._CalendarEvent_privateCopy(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recurrence":
			out.Values[i] = ec._CalendarEvent_recurrence(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recurringEventId":
			out.Values[i] = ec._CalendarEvent_recurringEventId(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sequence":
			out.Values[i] = ec._CalendarEvent_sequence(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "start":
			out.Values[i] = ec._CalendarEvent_start(ctx, field, obj)
		case "end":
			out.Values[i] = ec._CalendarEvent_end(ctx, field, obj)
		case "status":
			out.Values[i] = ec._CalendarEvent_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "summary":
			out.Values[i] = ec._CalendarEvent_summary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "transparency":
			out.Values[i] = ec._CalendarEvent_transparency(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updated":
			out.Values[i] = ec._CalendarEvent_updated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visibility":
			out.Values[i] = ec._CalendarEvent_visibility(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var contextImplementors = []string{"Context"}

func (ec *executionContext) _Context(ctx context.Context, sel ast.SelectionSet, obj *feedlib.Context) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, contextImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Context")
		case "userID":
			out.Values[i] = ec._Context_userID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "flavour":
			out.Values[i] = ec._Context_flavour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organizationID":
			out.Values[i] = ec._Context_organizationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "locationID":
			out.Values[i] = ec._Context_locationID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timestamp":
			out.Values[i] = ec._Context_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var dummyImplementors = []string{"Dummy", "_Entity"}

func (ec *executionContext) _Dummy(ctx context.Context, sel ast.SelectionSet, obj *dto.Dummy) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, dummyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Dummy")
		case "id":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Dummy_id(ctx, field, obj)
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var entityImplementors = []string{"Entity"}

func (ec *executionContext) _Entity(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, entityImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Entity",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Entity")
		case "findAccessTokenByJwt":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findAccessTokenByJwt(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findDummyByID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findDummyByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findFeedByID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findFeedByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findSavedNotificationByID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Entity_findSavedNotificationByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventImplementors = []string{"Event"}

func (ec *executionContext) _Event(ctx context.Context, sel ast.SelectionSet, obj *feedlib.Event) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Event")
		case "id":
			out.Values[i] = ec._Event_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._Event_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "context":
			out.Values[i] = ec._Event_context(ctx, field, obj)
		case "payload":
			out.Values[i] = ec._Event_payload(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventAttachmentImplementors = []string{"EventAttachment"}

func (ec *executionContext) _EventAttachment(ctx context.Context, sel ast.SelectionSet, obj *calendar.EventAttachment) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventAttachmentImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventAttachment")
		case "fileID":
			out.Values[i] = ec._EventAttachment_fileID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "fileURL":
			out.Values[i] = ec._EventAttachment_fileURL(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "iconLink":
			out.Values[i] = ec._EventAttachment_iconLink(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mimeType":
			out.Values[i] = ec._EventAttachment_mimeType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._EventAttachment_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventAttendeeImplementors = []string{"EventAttendee"}

func (ec *executionContext) _EventAttendee(ctx context.Context, sel ast.SelectionSet, obj *calendar.EventAttendee) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventAttendeeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventAttendee")
		case "id":
			out.Values[i] = ec._EventAttendee_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "additionalGuests":
			out.Values[i] = ec._EventAttendee_additionalGuests(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "comment":
			out.Values[i] = ec._EventAttendee_comment(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "displayName":
			out.Values[i] = ec._EventAttendee_displayName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._EventAttendee_email(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "optional":
			out.Values[i] = ec._EventAttendee_optional(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "organizer":
			out.Values[i] = ec._EventAttendee_organizer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resource":
			out.Values[i] = ec._EventAttendee_resource(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "responseStatus":
			out.Values[i] = ec._EventAttendee_responseStatus(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "self":
			out.Values[i] = ec._EventAttendee_self(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var eventDateTimeImplementors = []string{"EventDateTime"}

func (ec *executionContext) _EventDateTime(ctx context.Context, sel ast.SelectionSet, obj *calendar.EventDateTime) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, eventDateTimeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("EventDateTime")
		case "date":
			out.Values[i] = ec._EventDateTime_date(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "dateTime":
			out.Values[i] = ec._EventDateTime_dateTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timeZone":
			out.Values[i] = ec._EventDateTime_timeZone(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feedImplementors = []string{"Feed", "_Entity"}

func (ec *executionContext) _Feed(ctx context.Context, sel ast.SelectionSet, obj *domain.Feed) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feedImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Feed")
		case "id":
			out.Values[i] = ec._Feed_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sequenceNumber":
			out.Values[i] = ec._Feed_sequenceNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uid":
			out.Values[i] = ec._Feed_uid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "flavour":
			out.Values[i] = ec._Feed_flavour(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actions":
			out.Values[i] = ec._Feed_actions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "nudges":
			out.Values[i] = ec._Feed_nudges(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "items":
			out.Values[i] = ec._Feed_items(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isAnonymous":
			out.Values[i] = ec._Feed_isAnonymous(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var feedbackImplementors = []string{"Feedback"}

func (ec *executionContext) _Feedback(ctx context.Context, sel ast.SelectionSet, obj *dto.Feedback) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, feedbackImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Feedback")
		case "question":
			out.Values[i] = ec._Feedback_question(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "answer":
			out.Values[i] = ec._Feedback_answer(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var filterParamsImplementors = []string{"FilterParams"}

func (ec *executionContext) _FilterParams(ctx context.Context, sel ast.SelectionSet, obj *helpers.FilterParams) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, filterParamsImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FilterParams")
		case "labels":
			out.Values[i] = ec._FilterParams_labels(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var firebaseAPNSConfigImplementors = []string{"FirebaseAPNSConfig"}

func (ec *executionContext) _FirebaseAPNSConfig(ctx context.Context, sel ast.SelectionSet, obj *dto.FirebaseAPNSConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, firebaseAPNSConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FirebaseAPNSConfig")
		case "headers":
			out.Values[i] = ec._FirebaseAPNSConfig_headers(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var firebaseAndroidConfigImplementors = []string{"FirebaseAndroidConfig"}

func (ec *executionContext) _FirebaseAndroidConfig(ctx context.Context, sel ast.SelectionSet, obj *dto.FirebaseAndroidConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, firebaseAndroidConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FirebaseAndroidConfig")
		case "collapseKey":
			out.Values[i] = ec._FirebaseAndroidConfig_collapseKey(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "priority":
			out.Values[i] = ec._FirebaseAndroidConfig_priority(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "restrictedPackageName":
			out.Values[i] = ec._FirebaseAndroidConfig_restrictedPackageName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._FirebaseAndroidConfig_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var firebaseSimpleNotificationImplementors = []string{"FirebaseSimpleNotification"}

func (ec *executionContext) _FirebaseSimpleNotification(ctx context.Context, sel ast.SelectionSet, obj *dto.FirebaseSimpleNotification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, firebaseSimpleNotificationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FirebaseSimpleNotification")
		case "title":
			out.Values[i] = ec._FirebaseSimpleNotification_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "body":
			out.Values[i] = ec._FirebaseSimpleNotification_body(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "imageURL":
			out.Values[i] = ec._FirebaseSimpleNotification_imageURL(ctx, field, obj)
		case "data":
			out.Values[i] = ec._FirebaseSimpleNotification_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var firebaseWebpushConfigImplementors = []string{"FirebaseWebpushConfig"}

func (ec *executionContext) _FirebaseWebpushConfig(ctx context.Context, sel ast.SelectionSet, obj *dto.FirebaseWebpushConfig) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, firebaseWebpushConfigImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("FirebaseWebpushConfig")
		case "headers":
			out.Values[i] = ec._FirebaseWebpushConfig_headers(ctx, field, obj)
		case "data":
			out.Values[i] = ec._FirebaseWebpushConfig_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ghostCMSAuthorImplementors = []string{"GhostCMSAuthor"}

func (ec *executionContext) _GhostCMSAuthor(ctx context.Context, sel ast.SelectionSet, obj *domain.GhostCMSAuthor) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ghostCMSAuthorImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GhostCMSAuthor")
		case "id":
			out.Values[i] = ec._GhostCMSAuthor_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._GhostCMSAuthor_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "slug":
			out.Values[i] = ec._GhostCMSAuthor_slug(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._GhostCMSAuthor_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "profileImage":
			out.Values[i] = ec._GhostCMSAuthor_profileImage(ctx, field, obj)
		case "website":
			out.Values[i] = ec._GhostCMSAuthor_website(ctx, field, obj)
		case "location":
			out.Values[i] = ec._GhostCMSAuthor_location(ctx, field, obj)
		case "facebook":
			out.Values[i] = ec._GhostCMSAuthor_facebook(ctx, field, obj)
		case "twitter":
			out.Values[i] = ec._GhostCMSAuthor_twitter(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ghostCMSPostImplementors = []string{"GhostCMSPost"}

func (ec *executionContext) _GhostCMSPost(ctx context.Context, sel ast.SelectionSet, obj *domain.GhostCMSPost) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ghostCMSPostImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GhostCMSPost")
		case "id":
			out.Values[i] = ec._GhostCMSPost_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "slug":
			out.Values[i] = ec._GhostCMSPost_slug(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "uuid":
			out.Values[i] = ec._GhostCMSPost_uuid(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._GhostCMSPost_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "html":
			out.Values[i] = ec._GhostCMSPost_html(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "excerpt":
			out.Values[i] = ec._GhostCMSPost_excerpt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._GhostCMSPost_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "featureImage":
			out.Values[i] = ec._GhostCMSPost_featureImage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "readingTime":
			out.Values[i] = ec._GhostCMSPost_readingTime(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tags":
			out.Values[i] = ec._GhostCMSPost_tags(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "createdAt":
			out.Values[i] = ec._GhostCMSPost_createdAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "publishedAt":
			out.Values[i] = ec._GhostCMSPost_publishedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "updatedAt":
			out.Values[i] = ec._GhostCMSPost_updatedAt(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "commentID":
			out.Values[i] = ec._GhostCMSPost_commentID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var ghostCMSTagImplementors = []string{"GhostCMSTag"}

func (ec *executionContext) _GhostCMSTag(ctx context.Context, sel ast.SelectionSet, obj *domain.GhostCMSTag) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, ghostCMSTagImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("GhostCMSTag")
		case "id":
			out.Values[i] = ec._GhostCMSTag_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._GhostCMSTag_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "slug":
			out.Values[i] = ec._GhostCMSTag_slug(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._GhostCMSTag_description(ctx, field, obj)
		case "visibility":
			out.Values[i] = ec._GhostCMSTag_visibility(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._GhostCMSTag_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var itemImplementors = []string{"Item"}

func (ec *executionContext) _Item(ctx context.Context, sel ast.SelectionSet, obj *feedlib.Item) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, itemImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Item")
		case "id":
			out.Values[i] = ec._Item_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sequenceNumber":
			out.Values[i] = ec._Item_sequenceNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiry":
			out.Values[i] = ec._Item_expiry(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "persistent":
			out.Values[i] = ec._Item_persistent(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Item_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visibility":
			out.Values[i] = ec._Item_visibility(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "icon":
			out.Values[i] = ec._Item_icon(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "author":
			out.Values[i] = ec._Item_author(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "tagline":
			out.Values[i] = ec._Item_tagline(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "label":
			out.Values[i] = ec._Item_label(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timestamp":
			out.Values[i] = ec._Item_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "summary":
			out.Values[i] = ec._Item_summary(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "text":
			out.Values[i] = ec._Item_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "textType":
			out.Values[i] = ec._Item_textType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "links":
			out.Values[i] = ec._Item_links(ctx, field, obj)
		case "actions":
			out.Values[i] = ec._Item_actions(ctx, field, obj)
		case "conversations":
			out.Values[i] = ec._Item_conversations(ctx, field, obj)
		case "users":
			out.Values[i] = ec._Item_users(ctx, field, obj)
		case "groups":
			out.Values[i] = ec._Item_groups(ctx, field, obj)
		case "notificationChannels":
			out.Values[i] = ec._Item_notificationChannels(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var linkImplementors = []string{"Link"}

func (ec *executionContext) _Link(ctx context.Context, sel ast.SelectionSet, obj *feedlib.Link) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, linkImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Link")
		case "id":
			out.Values[i] = ec._Link_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._Link_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "linkType":
			out.Values[i] = ec._Link_linkType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Link_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec._Link_description(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "thumbnail":
			out.Values[i] = ec._Link_thumbnail(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var msgImplementors = []string{"Msg"}

func (ec *executionContext) _Msg(ctx context.Context, sel ast.SelectionSet, obj *feedlib.Message) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, msgImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Msg")
		case "id":
			out.Values[i] = ec._Msg_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sequenceNumber":
			out.Values[i] = ec._Msg_sequenceNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "text":
			out.Values[i] = ec._Msg_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "replyTo":
			out.Values[i] = ec._Msg_replyTo(ctx, field, obj)
		case "postedByUID":
			out.Values[i] = ec._Msg_postedByUID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postedByName":
			out.Values[i] = ec._Msg_postedByName(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timestamp":
			out.Values[i] = ec._Msg_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var mutationImplementors = []string{"Mutation"}

func (ec *executionContext) _Mutation(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, mutationImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Mutation",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Mutation")
		case "testFeature":
			out.Values[i] = ec._Mutation_testFeature(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sendNotification":
			out.Values[i] = ec._Mutation_sendNotification(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sendFCMByPhoneOrEmail":
			out.Values[i] = ec._Mutation_sendFCMByPhoneOrEmail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resolveFeedItem":
			out.Values[i] = ec._Mutation_resolveFeedItem(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unresolveFeedItem":
			out.Values[i] = ec._Mutation_unresolveFeedItem(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "pinFeedItem":
			out.Values[i] = ec._Mutation_pinFeedItem(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unpinFeedItem":
			out.Values[i] = ec._Mutation_unpinFeedItem(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hideFeedItem":
			out.Values[i] = ec._Mutation_hideFeedItem(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "showFeedItem":
			out.Values[i] = ec._Mutation_showFeedItem(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hideNudge":
			out.Values[i] = ec._Mutation_hideNudge(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "showNudge":
			out.Values[i] = ec._Mutation_showNudge(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "postMessage":
			out.Values[i] = ec._Mutation_postMessage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteMessage":
			out.Values[i] = ec._Mutation_deleteMessage(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "processEvent":
			out.Values[i] = ec._Mutation_processEvent(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "simpleEmail":
			out.Values[i] = ec._Mutation_simpleEmail(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verifyOTP":
			out.Values[i] = ec._Mutation_verifyOTP(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "verifyEmailOTP":
			out.Values[i] = ec._Mutation_verifyEmailOTP(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "send":
			out.Values[i] = ec._Mutation_send(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sendToMany":
			out.Values[i] = ec._Mutation_sendToMany(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "recordNPSResponse":
			out.Values[i] = ec._Mutation_recordNPSResponse(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "upload":
			out.Values[i] = ec._Mutation_upload(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "phoneNumberVerificationCode":
			out.Values[i] = ec._Mutation_phoneNumberVerificationCode(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "wellnessCardActivationDependant":
			out.Values[i] = ec._Mutation_wellnessCardActivationDependant(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "wellnessCardActivationPrincipal":
			out.Values[i] = ec._Mutation_wellnessCardActivationPrincipal(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "billNotification":
			out.Values[i] = ec._Mutation_billNotification(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "virtualCards":
			out.Values[i] = ec._Mutation_virtualCards(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visitStart":
			out.Values[i] = ec._Mutation_visitStart(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "claimNotification":
			out.Values[i] = ec._Mutation_claimNotification(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "preauthApproval":
			out.Values[i] = ec._Mutation_preauthApproval(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "preauthRequest":
			out.Values[i] = ec._Mutation_preauthRequest(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sladeOTP":
			out.Values[i] = ec._Mutation_sladeOTP(ctx, field)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nPSResponseImplementors = []string{"NPSResponse"}

func (ec *executionContext) _NPSResponse(ctx context.Context, sel ast.SelectionSet, obj *dto.NPSResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nPSResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NPSResponse")
		case "id":
			out.Values[i] = ec._NPSResponse_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec._NPSResponse_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "score":
			out.Values[i] = ec._NPSResponse_score(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sladeCode":
			out.Values[i] = ec._NPSResponse_sladeCode(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "email":
			out.Values[i] = ec._NPSResponse_email(ctx, field, obj)
		case "msisdn":
			out.Values[i] = ec._NPSResponse_msisdn(ctx, field, obj)
		case "feedback":
			out.Values[i] = ec._NPSResponse_feedback(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var notificationBodyImplementors = []string{"NotificationBody"}

func (ec *executionContext) _NotificationBody(ctx context.Context, sel ast.SelectionSet, obj *feedlib.NotificationBody) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, notificationBodyImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("NotificationBody")
		case "publishMessage":
			out.Values[i] = ec._NotificationBody_publishMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deleteMessage":
			out.Values[i] = ec._NotificationBody_deleteMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "resolveMessage":
			out.Values[i] = ec._NotificationBody_resolveMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "unresolveMessage":
			out.Values[i] = ec._NotificationBody_unresolveMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "showMessage":
			out.Values[i] = ec._NotificationBody_showMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hideMessage":
			out.Values[i] = ec._NotificationBody_hideMessage(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var nudgeImplementors = []string{"Nudge"}

func (ec *executionContext) _Nudge(ctx context.Context, sel ast.SelectionSet, obj *feedlib.Nudge) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, nudgeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Nudge")
		case "id":
			out.Values[i] = ec._Nudge_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "sequenceNumber":
			out.Values[i] = ec._Nudge_sequenceNumber(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "visibility":
			out.Values[i] = ec._Nudge_visibility(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Nudge_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "expiry":
			out.Values[i] = ec._Nudge_expiry(ctx, field, obj)
		case "title":
			out.Values[i] = ec._Nudge_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "text":
			out.Values[i] = ec._Nudge_text(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "actions":
			out.Values[i] = ec._Nudge_actions(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "groups":
			out.Values[i] = ec._Nudge_groups(ctx, field, obj)
		case "users":
			out.Values[i] = ec._Nudge_users(ctx, field, obj)
		case "links":
			out.Values[i] = ec._Nudge_links(ctx, field, obj)
		case "notificationChannels":
			out.Values[i] = ec._Nudge_notificationChannels(ctx, field, obj)
		case "notificationBody":
			out.Values[i] = ec._Nudge_notificationBody(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var payloadImplementors = []string{"Payload"}

func (ec *executionContext) _Payload(ctx context.Context, sel ast.SelectionSet, obj *feedlib.Payload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, payloadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Payload")
		case "data":
			out.Values[i] = ec._Payload_data(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var queryImplementors = []string{"Query"}

func (ec *executionContext) _Query(ctx context.Context, sel ast.SelectionSet) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, queryImplementors)

	ctx = graphql.WithFieldContext(ctx, &graphql.FieldContext{
		Object: "Query",
	})

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Query")
		case "getLibraryContent":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getLibraryContent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getFaqsContent":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getFaqsContent(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "notifications":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_notifications(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "getFeed":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_getFeed(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "labels":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_labels(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "unreadPersistentItems":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_unreadPersistentItems(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "generateOTP":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_generateOTP(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "generateAndEmailOTP":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_generateAndEmailOTP(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "generateRetryOTP":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_generateRetryOTP(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "emailVerificationOTP":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_emailVerificationOTP(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "listNPSResponse":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_listNPSResponse(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "twilioAccessToken":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_twilioAccessToken(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "findUploadByID":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query_findUploadByID(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "_entities":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__entities(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "_service":
			field := field
			out.Concurrently(i, func() (res graphql.Marshaler) {
				defer func() {
					if r := recover(); r != nil {
						ec.Error(ctx, ec.Recover(ctx, r))
					}
				}()
				res = ec._Query__service(ctx, field)
				if res == graphql.Null {
					atomic.AddUint32(&invalids, 1)
				}
				return res
			})
		case "__type":
			out.Values[i] = ec._Query___type(ctx, field)
		case "__schema":
			out.Values[i] = ec._Query___schema(ctx, field)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var recipientImplementors = []string{"Recipient"}

func (ec *executionContext) _Recipient(ctx context.Context, sel ast.SelectionSet, obj *dto.Recipient) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, recipientImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Recipient")
		case "number":
			out.Values[i] = ec._Recipient_number(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "cost":
			out.Values[i] = ec._Recipient_cost(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "status":
			out.Values[i] = ec._Recipient_status(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "messageID":
			out.Values[i] = ec._Recipient_messageID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sMSImplementors = []string{"SMS"}

func (ec *executionContext) _SMS(ctx context.Context, sel ast.SelectionSet, obj *dto.SMS) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sMSImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SMS")
		case "recipients":
			out.Values[i] = ec._SMS_recipients(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var savedNotificationImplementors = []string{"SavedNotification", "_Entity"}

func (ec *executionContext) _SavedNotification(ctx context.Context, sel ast.SelectionSet, obj *dto.SavedNotification) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, savedNotificationImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SavedNotification")
		case "id":
			out.Values[i] = ec._SavedNotification_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "registrationToken":
			out.Values[i] = ec._SavedNotification_registrationToken(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "messageID":
			out.Values[i] = ec._SavedNotification_messageID(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "timestamp":
			out.Values[i] = ec._SavedNotification_timestamp(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "data":
			out.Values[i] = ec._SavedNotification_data(ctx, field, obj)
		case "notification":
			out.Values[i] = ec._SavedNotification_notification(ctx, field, obj)
		case "androidConfig":
			out.Values[i] = ec._SavedNotification_androidConfig(ctx, field, obj)
		case "webpushConfig":
			out.Values[i] = ec._SavedNotification_webpushConfig(ctx, field, obj)
		case "apnsConfig":
			out.Values[i] = ec._SavedNotification_apnsConfig(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var sendMessageResponseImplementors = []string{"SendMessageResponse"}

func (ec *executionContext) _SendMessageResponse(ctx context.Context, sel ast.SelectionSet, obj *dto.SendMessageResponse) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, sendMessageResponseImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("SendMessageResponse")
		case "SMSMessageData":
			out.Values[i] = ec._SendMessageResponse_SMSMessageData(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var uploadImplementors = []string{"Upload"}

func (ec *executionContext) _Upload(ctx context.Context, sel ast.SelectionSet, obj *profileutils.Upload) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, uploadImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("Upload")
		case "id":
			out.Values[i] = ec._Upload_id(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "url":
			out.Values[i] = ec._Upload_url(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "size":
			out.Values[i] = ec._Upload_size(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "hash":
			out.Values[i] = ec._Upload_hash(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "creation":
			out.Values[i] = ec._Upload_creation(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "title":
			out.Values[i] = ec._Upload_title(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "contentType":
			out.Values[i] = ec._Upload_contentType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "language":
			out.Values[i] = ec._Upload_language(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "base64data":
			out.Values[i] = ec._Upload_base64data(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var _ServiceImplementors = []string{"_Service"}

func (ec *executionContext) __Service(ctx context.Context, sel ast.SelectionSet, obj *fedruntime.Service) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, _ServiceImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("_Service")
		case "sdl":
			out.Values[i] = ec.__Service_sdl(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __DirectiveImplementors = []string{"__Directive"}

func (ec *executionContext) ___Directive(ctx context.Context, sel ast.SelectionSet, obj *introspection.Directive) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __DirectiveImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Directive")
		case "name":
			out.Values[i] = ec.___Directive_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Directive_description(ctx, field, obj)
		case "locations":
			out.Values[i] = ec.___Directive_locations(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "args":
			out.Values[i] = ec.___Directive_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __EnumValueImplementors = []string{"__EnumValue"}

func (ec *executionContext) ___EnumValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.EnumValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __EnumValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__EnumValue")
		case "name":
			out.Values[i] = ec.___EnumValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___EnumValue_description(ctx, field, obj)
		case "isDeprecated":
			out.Values[i] = ec.___EnumValue_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___EnumValue_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __FieldImplementors = []string{"__Field"}

func (ec *executionContext) ___Field(ctx context.Context, sel ast.SelectionSet, obj *introspection.Field) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __FieldImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Field")
		case "name":
			out.Values[i] = ec.___Field_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___Field_description(ctx, field, obj)
		case "args":
			out.Values[i] = ec.___Field_args(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "type":
			out.Values[i] = ec.___Field_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "isDeprecated":
			out.Values[i] = ec.___Field_isDeprecated(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "deprecationReason":
			out.Values[i] = ec.___Field_deprecationReason(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __InputValueImplementors = []string{"__InputValue"}

func (ec *executionContext) ___InputValue(ctx context.Context, sel ast.SelectionSet, obj *introspection.InputValue) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __InputValueImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__InputValue")
		case "name":
			out.Values[i] = ec.___InputValue_name(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "description":
			out.Values[i] = ec.___InputValue_description(ctx, field, obj)
		case "type":
			out.Values[i] = ec.___InputValue_type(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "defaultValue":
			out.Values[i] = ec.___InputValue_defaultValue(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __SchemaImplementors = []string{"__Schema"}

func (ec *executionContext) ___Schema(ctx context.Context, sel ast.SelectionSet, obj *introspection.Schema) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __SchemaImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Schema")
		case "types":
			out.Values[i] = ec.___Schema_types(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "queryType":
			out.Values[i] = ec.___Schema_queryType(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "mutationType":
			out.Values[i] = ec.___Schema_mutationType(ctx, field, obj)
		case "subscriptionType":
			out.Values[i] = ec.___Schema_subscriptionType(ctx, field, obj)
		case "directives":
			out.Values[i] = ec.___Schema_directives(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

var __TypeImplementors = []string{"__Type"}

func (ec *executionContext) ___Type(ctx context.Context, sel ast.SelectionSet, obj *introspection.Type) graphql.Marshaler {
	fields := graphql.CollectFields(ec.OperationContext, sel, __TypeImplementors)

	out := graphql.NewFieldSet(fields)
	var invalids uint32
	for i, field := range fields {
		switch field.Name {
		case "__typename":
			out.Values[i] = graphql.MarshalString("__Type")
		case "kind":
			out.Values[i] = ec.___Type_kind(ctx, field, obj)
			if out.Values[i] == graphql.Null {
				invalids++
			}
		case "name":
			out.Values[i] = ec.___Type_name(ctx, field, obj)
		case "description":
			out.Values[i] = ec.___Type_description(ctx, field, obj)
		case "fields":
			out.Values[i] = ec.___Type_fields(ctx, field, obj)
		case "interfaces":
			out.Values[i] = ec.___Type_interfaces(ctx, field, obj)
		case "possibleTypes":
			out.Values[i] = ec.___Type_possibleTypes(ctx, field, obj)
		case "enumValues":
			out.Values[i] = ec.___Type_enumValues(ctx, field, obj)
		case "inputFields":
			out.Values[i] = ec.___Type_inputFields(ctx, field, obj)
		case "ofType":
			out.Values[i] = ec.___Type_ofType(ctx, field, obj)
		default:
			panic("unknown field " + strconv.Quote(field.Name))
		}
	}
	out.Dispatch()
	if invalids > 0 {
		return graphql.Null
	}
	return out
}

// endregion **************************** object.gotpl ****************************

// region    ***************************** type.gotpl *****************************

func (ec *executionContext) marshalNAccessToken2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐAccessToken(ctx context.Context, sel ast.SelectionSet, v dto.AccessToken) graphql.Marshaler {
	return ec._AccessToken(ctx, sel, &v)
}

func (ec *executionContext) marshalNAccessToken2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐAccessToken(ctx context.Context, sel ast.SelectionSet, v *dto.AccessToken) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._AccessToken(ctx, sel, v)
}

func (ec *executionContext) marshalNAction2githubᚗcomᚋsavannahghiᚋfeedlibᚐAction(ctx context.Context, sel ast.SelectionSet, v feedlib.Action) graphql.Marshaler {
	return ec._Action(ctx, sel, &v)
}

func (ec *executionContext) marshalNAction2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐActionᚄ(ctx context.Context, sel ast.SelectionSet, v []feedlib.Action) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNAction2githubᚗcomᚋsavannahghiᚋfeedlibᚐAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNActionType2githubᚗcomᚋsavannahghiᚋfeedlibᚐActionType(ctx context.Context, v interface{}) (feedlib.ActionType, error) {
	var res feedlib.ActionType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNActionType2githubᚗcomᚋsavannahghiᚋfeedlibᚐActionType(ctx context.Context, sel ast.SelectionSet, v feedlib.ActionType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	res := graphql.MarshalBoolean(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalBoolean(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNBooleanFilter2githubᚗcomᚋsavannahghiᚋfeedlibᚐBooleanFilter(ctx context.Context, v interface{}) (feedlib.BooleanFilter, error) {
	var res feedlib.BooleanFilter
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNBooleanFilter2githubᚗcomᚋsavannahghiᚋfeedlibᚐBooleanFilter(ctx context.Context, sel ast.SelectionSet, v feedlib.BooleanFilter) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNContextInput2githubᚗcomᚋsavannahghiᚋfeedlibᚐContext(ctx context.Context, v interface{}) (feedlib.Context, error) {
	res, err := ec.unmarshalInputContextInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNDummy2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐDummy(ctx context.Context, sel ast.SelectionSet, v dto.Dummy) graphql.Marshaler {
	return ec._Dummy(ctx, sel, &v)
}

func (ec *executionContext) marshalNDummy2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐDummy(ctx context.Context, sel ast.SelectionSet, v *dto.Dummy) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Dummy(ctx, sel, v)
}

func (ec *executionContext) marshalNEventAttachment2ᚕᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventAttachmentᚄ(ctx context.Context, sel ast.SelectionSet, v []*calendar.EventAttachment) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEventAttachment2ᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventAttachment(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEventAttachment2ᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventAttachment(ctx context.Context, sel ast.SelectionSet, v *calendar.EventAttachment) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EventAttachment(ctx, sel, v)
}

func (ec *executionContext) marshalNEventAttendee2ᚕᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventAttendeeᚄ(ctx context.Context, sel ast.SelectionSet, v []*calendar.EventAttendee) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNEventAttendee2ᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventAttendee(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNEventAttendee2ᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventAttendee(ctx context.Context, sel ast.SelectionSet, v *calendar.EventAttendee) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._EventAttendee(ctx, sel, v)
}

func (ec *executionContext) unmarshalNEventInput2githubᚗcomᚋsavannahghiᚋfeedlibᚐEvent(ctx context.Context, v interface{}) (feedlib.Event, error) {
	res, err := ec.unmarshalInputEventInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFeed2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐFeed(ctx context.Context, sel ast.SelectionSet, v domain.Feed) graphql.Marshaler {
	return ec._Feed(ctx, sel, &v)
}

func (ec *executionContext) marshalNFeed2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐFeed(ctx context.Context, sel ast.SelectionSet, v *domain.Feed) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Feed(ctx, sel, v)
}

func (ec *executionContext) unmarshalNFirebaseSimpleNotificationInput2githubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseSimpleNotificationInput(ctx context.Context, v interface{}) (firebasetools.FirebaseSimpleNotificationInput, error) {
	res, err := ec.unmarshalInputFirebaseSimpleNotificationInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx context.Context, v interface{}) (feedlib.Flavour, error) {
	var res feedlib.Flavour
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNFlavour2githubᚗcomᚋsavannahghiᚋfeedlibᚐFlavour(ctx context.Context, sel ast.SelectionSet, v feedlib.Flavour) graphql.Marshaler {
	return v
}

func (ec *executionContext) marshalNGhostCMSPost2ᚕᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐGhostCMSPostᚄ(ctx context.Context, sel ast.SelectionSet, v []*domain.GhostCMSPost) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGhostCMSPost2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐGhostCMSPost(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNGhostCMSPost2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐGhostCMSPost(ctx context.Context, sel ast.SelectionSet, v *domain.GhostCMSPost) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._GhostCMSPost(ctx, sel, v)
}

func (ec *executionContext) marshalNGhostCMSTag2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐGhostCMSTag(ctx context.Context, sel ast.SelectionSet, v domain.GhostCMSTag) graphql.Marshaler {
	return ec._GhostCMSTag(ctx, sel, &v)
}

func (ec *executionContext) marshalNGhostCMSTag2ᚕgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐGhostCMSTagᚄ(ctx context.Context, sel ast.SelectionSet, v []domain.GhostCMSTag) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNGhostCMSTag2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋdomainᚐGhostCMSTag(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalNHandling2githubᚗcomᚋsavannahghiᚋfeedlibᚐHandling(ctx context.Context, v interface{}) (feedlib.Handling, error) {
	var res feedlib.Handling
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNHandling2githubᚗcomᚋsavannahghiᚋfeedlibᚐHandling(ctx context.Context, sel ast.SelectionSet, v feedlib.Handling) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNID2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalID(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNID2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalID(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int(ctx context.Context, v interface{}) (int, error) {
	res, err := graphql.UnmarshalInt(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int(ctx context.Context, sel ast.SelectionSet, v int) graphql.Marshaler {
	res := graphql.MarshalInt(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNInt2int64(ctx context.Context, v interface{}) (int64, error) {
	res, err := graphql.UnmarshalInt64(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNInt2int64(ctx context.Context, sel ast.SelectionSet, v int64) graphql.Marshaler {
	res := graphql.MarshalInt64(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNItem2githubᚗcomᚋsavannahghiᚋfeedlibᚐItem(ctx context.Context, sel ast.SelectionSet, v feedlib.Item) graphql.Marshaler {
	return ec._Item(ctx, sel, &v)
}

func (ec *executionContext) marshalNItem2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐItemᚄ(ctx context.Context, sel ast.SelectionSet, v []feedlib.Item) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNItem2githubᚗcomᚋsavannahghiᚋfeedlibᚐItem(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNItem2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐItem(ctx context.Context, sel ast.SelectionSet, v *feedlib.Item) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Item(ctx, sel, v)
}

func (ec *executionContext) marshalNLink2githubᚗcomᚋsavannahghiᚋfeedlibᚐLink(ctx context.Context, sel ast.SelectionSet, v feedlib.Link) graphql.Marshaler {
	return ec._Link(ctx, sel, &v)
}

func (ec *executionContext) unmarshalNLinkType2githubᚗcomᚋsavannahghiᚋfeedlibᚐLinkType(ctx context.Context, v interface{}) (feedlib.LinkType, error) {
	var res feedlib.LinkType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNLinkType2githubᚗcomᚋsavannahghiᚋfeedlibᚐLinkType(ctx context.Context, sel ast.SelectionSet, v feedlib.LinkType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNMsg2githubᚗcomᚋsavannahghiᚋfeedlibᚐMessage(ctx context.Context, sel ast.SelectionSet, v feedlib.Message) graphql.Marshaler {
	return ec._Msg(ctx, sel, &v)
}

func (ec *executionContext) marshalNMsg2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐMessage(ctx context.Context, sel ast.SelectionSet, v *feedlib.Message) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Msg(ctx, sel, v)
}

func (ec *executionContext) unmarshalNMsgInput2githubᚗcomᚋsavannahghiᚋfeedlibᚐMessage(ctx context.Context, v interface{}) (feedlib.Message, error) {
	res, err := ec.unmarshalInputMsgInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNNPSInput2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐNPSInput(ctx context.Context, v interface{}) (dto.NPSInput, error) {
	res, err := ec.unmarshalInputNPSInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNNPSResponse2ᚕᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐNPSResponseᚄ(ctx context.Context, sel ast.SelectionSet, v []*dto.NPSResponse) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNPSResponse2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐNPSResponse(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNNPSResponse2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐNPSResponse(ctx context.Context, sel ast.SelectionSet, v *dto.NPSResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._NPSResponse(ctx, sel, v)
}

func (ec *executionContext) marshalNNudge2githubᚗcomᚋsavannahghiᚋfeedlibᚐNudge(ctx context.Context, sel ast.SelectionSet, v feedlib.Nudge) graphql.Marshaler {
	return ec._Nudge(ctx, sel, &v)
}

func (ec *executionContext) marshalNNudge2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐNudgeᚄ(ctx context.Context, sel ast.SelectionSet, v []feedlib.Nudge) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNNudge2githubᚗcomᚋsavannahghiᚋfeedlibᚐNudge(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNNudge2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐNudge(ctx context.Context, sel ast.SelectionSet, v *feedlib.Nudge) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Nudge(ctx, sel, v)
}

func (ec *executionContext) unmarshalNPayloadInput2githubᚗcomᚋsavannahghiᚋfeedlibᚐPayload(ctx context.Context, v interface{}) (feedlib.Payload, error) {
	res, err := ec.unmarshalInputPayloadInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNRecipient2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐRecipient(ctx context.Context, sel ast.SelectionSet, v dto.Recipient) graphql.Marshaler {
	return ec._Recipient(ctx, sel, &v)
}

func (ec *executionContext) marshalNRecipient2ᚕgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐRecipientᚄ(ctx context.Context, sel ast.SelectionSet, v []dto.Recipient) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNRecipient2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐRecipient(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSMS2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSMS(ctx context.Context, sel ast.SelectionSet, v *dto.SMS) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SMS(ctx, sel, v)
}

func (ec *executionContext) marshalNSavedNotification2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSavedNotification(ctx context.Context, sel ast.SelectionSet, v dto.SavedNotification) graphql.Marshaler {
	return ec._SavedNotification(ctx, sel, &v)
}

func (ec *executionContext) marshalNSavedNotification2ᚕᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSavedNotificationᚄ(ctx context.Context, sel ast.SelectionSet, v []*dto.SavedNotification) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalNSavedNotification2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSavedNotification(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalNSavedNotification2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSavedNotification(ctx context.Context, sel ast.SelectionSet, v *dto.SavedNotification) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SavedNotification(ctx, sel, v)
}

func (ec *executionContext) marshalNSendMessageResponse2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSendMessageResponse(ctx context.Context, sel ast.SelectionSet, v dto.SendMessageResponse) graphql.Marshaler {
	return ec._SendMessageResponse(ctx, sel, &v)
}

func (ec *executionContext) marshalNSendMessageResponse2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐSendMessageResponse(ctx context.Context, sel ast.SelectionSet, v *dto.SendMessageResponse) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._SendMessageResponse(ctx, sel, v)
}

func (ec *executionContext) unmarshalNStatus2githubᚗcomᚋsavannahghiᚋfeedlibᚐStatus(ctx context.Context, v interface{}) (feedlib.Status, error) {
	var res feedlib.Status
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNStatus2githubᚗcomᚋsavannahghiᚋfeedlibᚐStatus(ctx context.Context, sel ast.SelectionSet, v feedlib.Status) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNString2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalNString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalNString2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalNString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalNString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalString(*v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalNTextType2githubᚗcomᚋsavannahghiᚋfeedlibᚐTextType(ctx context.Context, v interface{}) (feedlib.TextType, error) {
	var res feedlib.TextType
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTextType2githubᚗcomᚋsavannahghiᚋfeedlibᚐTextType(ctx context.Context, sel ast.SelectionSet, v feedlib.TextType) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalNTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	res := graphql.MarshalTime(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalNUpload2githubᚗcomᚋsavannahghiᚋprofileutilsᚐUpload(ctx context.Context, sel ast.SelectionSet, v profileutils.Upload) graphql.Marshaler {
	return ec._Upload(ctx, sel, &v)
}

func (ec *executionContext) marshalNUpload2ᚖgithubᚗcomᚋsavannahghiᚋprofileutilsᚐUpload(ctx context.Context, sel ast.SelectionSet, v *profileutils.Upload) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec._Upload(ctx, sel, v)
}

func (ec *executionContext) unmarshalNUploadInput2githubᚗcomᚋsavannahghiᚋprofileutilsᚐUploadInput(ctx context.Context, v interface{}) (profileutils.UploadInput, error) {
	res, err := ec.unmarshalInputUploadInput(ctx, v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalNVisibility2githubᚗcomᚋsavannahghiᚋfeedlibᚐVisibility(ctx context.Context, v interface{}) (feedlib.Visibility, error) {
	var res feedlib.Visibility
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalNVisibility2githubᚗcomᚋsavannahghiᚋfeedlibᚐVisibility(ctx context.Context, sel ast.SelectionSet, v feedlib.Visibility) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalN_Any2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_Any2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	res := graphql.MarshalMap(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN_Any2ᚕmapᚄ(ctx context.Context, v interface{}) ([]map[string]interface{}, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]map[string]interface{}, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN_Any2map(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN_Any2ᚕmapᚄ(ctx context.Context, sel ast.SelectionSet, v []map[string]interface{}) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalN_Any2map(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) marshalN_Entity2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v []fedruntime.Entity) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN_FieldSet2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN_FieldSet2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalN_Service2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐService(ctx context.Context, sel ast.SelectionSet, v fedruntime.Service) graphql.Marshaler {
	return ec.__Service(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx context.Context, sel ast.SelectionSet, v introspection.Directive) graphql.Marshaler {
	return ec.___Directive(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Directive2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirectiveᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Directive) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Directive2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐDirective(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalN__DirectiveLocation2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__DirectiveLocation2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) unmarshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, v interface{}) ([]string, error) {
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalN__DirectiveLocation2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalN__DirectiveLocation2ᚕstringᚄ(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__DirectiveLocation2string(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx context.Context, sel ast.SelectionSet, v introspection.EnumValue) graphql.Marshaler {
	return ec.___EnumValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx context.Context, sel ast.SelectionSet, v introspection.Field) graphql.Marshaler {
	return ec.___Field(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx context.Context, sel ast.SelectionSet, v introspection.InputValue) graphql.Marshaler {
	return ec.___InputValue(ctx, sel, &v)
}

func (ec *executionContext) marshalN__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v introspection.Type) graphql.Marshaler {
	return ec.___Type(ctx, sel, &v)
}

func (ec *executionContext) marshalN__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalN__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

func (ec *executionContext) unmarshalN__TypeKind2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalN__TypeKind2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	res := graphql.MarshalString(v)
	if res == graphql.Null {
		if !graphql.HasFieldError(ctx, graphql.GetFieldContext(ctx)) {
			ec.Errorf(ctx, "must not be null")
		}
	}
	return res
}

func (ec *executionContext) marshalOAction2githubᚗcomᚋsavannahghiᚋfeedlibᚐAction(ctx context.Context, sel ast.SelectionSet, v feedlib.Action) graphql.Marshaler {
	return ec._Action(ctx, sel, &v)
}

func (ec *executionContext) marshalOAction2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐAction(ctx context.Context, sel ast.SelectionSet, v []feedlib.Action) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOAction2githubᚗcomᚋsavannahghiᚋfeedlibᚐAction(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOBoolean2bool(ctx context.Context, v interface{}) (bool, error) {
	res, err := graphql.UnmarshalBoolean(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2bool(ctx context.Context, sel ast.SelectionSet, v bool) graphql.Marshaler {
	return graphql.MarshalBoolean(v)
}

func (ec *executionContext) unmarshalOBoolean2ᚖbool(ctx context.Context, v interface{}) (*bool, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalBoolean(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBoolean2ᚖbool(ctx context.Context, sel ast.SelectionSet, v *bool) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalBoolean(*v)
}

func (ec *executionContext) unmarshalOBooleanFilter2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐBooleanFilter(ctx context.Context, v interface{}) (*feedlib.BooleanFilter, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(feedlib.BooleanFilter)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOBooleanFilter2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐBooleanFilter(ctx context.Context, sel ast.SelectionSet, v *feedlib.BooleanFilter) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOChannel2githubᚗcomᚋsavannahghiᚋfeedlibᚐChannel(ctx context.Context, v interface{}) (feedlib.Channel, error) {
	var res feedlib.Channel
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOChannel2githubᚗcomᚋsavannahghiᚋfeedlibᚐChannel(ctx context.Context, sel ast.SelectionSet, v feedlib.Channel) graphql.Marshaler {
	return v
}

func (ec *executionContext) unmarshalOChannel2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐChannel(ctx context.Context, v interface{}) ([]feedlib.Channel, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]feedlib.Channel, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOChannel2githubᚗcomᚋsavannahghiᚋfeedlibᚐChannel(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOChannel2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐChannel(ctx context.Context, sel ast.SelectionSet, v []feedlib.Channel) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOChannel2githubᚗcomᚋsavannahghiᚋfeedlibᚐChannel(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalOContext2githubᚗcomᚋsavannahghiᚋfeedlibᚐContext(ctx context.Context, sel ast.SelectionSet, v feedlib.Context) graphql.Marshaler {
	return ec._Context(ctx, sel, &v)
}

func (ec *executionContext) marshalOEventDateTime2ᚖgoogleᚗgolangᚗorgᚋapiᚋcalendarᚋv3ᚐEventDateTime(ctx context.Context, sel ast.SelectionSet, v *calendar.EventDateTime) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._EventDateTime(ctx, sel, v)
}

func (ec *executionContext) marshalOFeedback2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFeedback(ctx context.Context, sel ast.SelectionSet, v dto.Feedback) graphql.Marshaler {
	return ec._Feedback(ctx, sel, &v)
}

func (ec *executionContext) marshalOFeedback2ᚕgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFeedback(ctx context.Context, sel ast.SelectionSet, v []dto.Feedback) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOFeedback2githubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFeedback(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOFeedbackInput2ᚕᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFeedbackInput(ctx context.Context, v interface{}) ([]*dto.FeedbackInput, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]*dto.FeedbackInput, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOFeedbackInput2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFeedbackInput(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) unmarshalOFeedbackInput2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFeedbackInput(ctx context.Context, v interface{}) (*dto.FeedbackInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFeedbackInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOFilterParamsInput2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋhelpersᚐFilterParams(ctx context.Context, v interface{}) (*helpers.FilterParams, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFilterParamsInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFirebaseAPNSConfig2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFirebaseAPNSConfig(ctx context.Context, sel ast.SelectionSet, v *dto.FirebaseAPNSConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FirebaseAPNSConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFirebaseAPNSConfigInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseAPNSConfigInput(ctx context.Context, v interface{}) (*firebasetools.FirebaseAPNSConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFirebaseAPNSConfigInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFirebaseAndroidConfig2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFirebaseAndroidConfig(ctx context.Context, sel ast.SelectionSet, v *dto.FirebaseAndroidConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FirebaseAndroidConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFirebaseAndroidConfigInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseAndroidConfigInput(ctx context.Context, v interface{}) (*firebasetools.FirebaseAndroidConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFirebaseAndroidConfigInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOFirebaseSimpleNotification2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFirebaseSimpleNotification(ctx context.Context, sel ast.SelectionSet, v *dto.FirebaseSimpleNotification) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FirebaseSimpleNotification(ctx, sel, v)
}

func (ec *executionContext) marshalOFirebaseWebpushConfig2ᚖgithubᚗcomᚋsavannahghiᚋengagementᚋpkgᚋengagementᚋapplicationᚋcommonᚋdtoᚐFirebaseWebpushConfig(ctx context.Context, sel ast.SelectionSet, v *dto.FirebaseWebpushConfig) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec._FirebaseWebpushConfig(ctx, sel, v)
}

func (ec *executionContext) unmarshalOFirebaseWebpushConfigInput2ᚖgithubᚗcomᚋsavannahghiᚋfirebasetoolsᚐFirebaseWebpushConfigInput(ctx context.Context, v interface{}) (*firebasetools.FirebaseWebpushConfigInput, error) {
	if v == nil {
		return nil, nil
	}
	res, err := ec.unmarshalInputFirebaseWebpushConfigInput(ctx, v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) unmarshalOID2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalID(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOID2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalID(*v)
}

func (ec *executionContext) unmarshalOInt2ᚖint(ctx context.Context, v interface{}) (*int, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalInt(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOInt2ᚖint(ctx context.Context, sel ast.SelectionSet, v *int) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalInt(*v)
}

func (ec *executionContext) marshalOLink2githubᚗcomᚋsavannahghiᚋfeedlibᚐLink(ctx context.Context, sel ast.SelectionSet, v feedlib.Link) graphql.Marshaler {
	return ec._Link(ctx, sel, &v)
}

func (ec *executionContext) marshalOLink2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐLink(ctx context.Context, sel ast.SelectionSet, v []feedlib.Link) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOLink2githubᚗcomᚋsavannahghiᚋfeedlibᚐLink(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) unmarshalOMap2map(ctx context.Context, v interface{}) (map[string]interface{}, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalMap(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOMap2map(ctx context.Context, sel ast.SelectionSet, v map[string]interface{}) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalMap(v)
}

func (ec *executionContext) marshalOMsg2githubᚗcomᚋsavannahghiᚋfeedlibᚐMessage(ctx context.Context, sel ast.SelectionSet, v feedlib.Message) graphql.Marshaler {
	return ec._Msg(ctx, sel, &v)
}

func (ec *executionContext) marshalOMsg2ᚕgithubᚗcomᚋsavannahghiᚋfeedlibᚐMessage(ctx context.Context, sel ast.SelectionSet, v []feedlib.Message) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalOMsg2githubᚗcomᚋsavannahghiᚋfeedlibᚐMessage(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalONotificationBody2githubᚗcomᚋsavannahghiᚋfeedlibᚐNotificationBody(ctx context.Context, sel ast.SelectionSet, v feedlib.NotificationBody) graphql.Marshaler {
	return ec._NotificationBody(ctx, sel, &v)
}

func (ec *executionContext) marshalOPayload2githubᚗcomᚋsavannahghiᚋfeedlibᚐPayload(ctx context.Context, sel ast.SelectionSet, v feedlib.Payload) graphql.Marshaler {
	return ec._Payload(ctx, sel, &v)
}

func (ec *executionContext) unmarshalOStatus2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐStatus(ctx context.Context, v interface{}) (*feedlib.Status, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(feedlib.Status)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOStatus2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐStatus(ctx context.Context, sel ast.SelectionSet, v *feedlib.Status) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) unmarshalOString2string(ctx context.Context, v interface{}) (string, error) {
	res, err := graphql.UnmarshalString(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2string(ctx context.Context, sel ast.SelectionSet, v string) graphql.Marshaler {
	return graphql.MarshalString(v)
}

func (ec *executionContext) unmarshalOString2ᚕstring(ctx context.Context, v interface{}) ([]string, error) {
	if v == nil {
		return nil, nil
	}
	var vSlice []interface{}
	if v != nil {
		if tmp1, ok := v.([]interface{}); ok {
			vSlice = tmp1
		} else {
			vSlice = []interface{}{v}
		}
	}
	var err error
	res := make([]string, len(vSlice))
	for i := range vSlice {
		ctx := graphql.WithPathContext(ctx, graphql.NewPathWithIndex(i))
		res[i], err = ec.unmarshalOString2string(ctx, vSlice[i])
		if err != nil {
			return nil, err
		}
	}
	return res, nil
}

func (ec *executionContext) marshalOString2ᚕstring(ctx context.Context, sel ast.SelectionSet, v []string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	for i := range v {
		ret[i] = ec.marshalOString2string(ctx, sel, v[i])
	}

	return ret
}

func (ec *executionContext) unmarshalOString2ᚖstring(ctx context.Context, v interface{}) (*string, error) {
	if v == nil {
		return nil, nil
	}
	res, err := graphql.UnmarshalString(v)
	return &res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOString2ᚖstring(ctx context.Context, sel ast.SelectionSet, v *string) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return graphql.MarshalString(*v)
}

func (ec *executionContext) unmarshalOTime2timeᚐTime(ctx context.Context, v interface{}) (time.Time, error) {
	res, err := graphql.UnmarshalTime(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOTime2timeᚐTime(ctx context.Context, sel ast.SelectionSet, v time.Time) graphql.Marshaler {
	return graphql.MarshalTime(v)
}

func (ec *executionContext) unmarshalOVisibility2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐVisibility(ctx context.Context, v interface{}) (*feedlib.Visibility, error) {
	if v == nil {
		return nil, nil
	}
	var res = new(feedlib.Visibility)
	err := res.UnmarshalGQL(v)
	return res, graphql.ErrorOnPath(ctx, err)
}

func (ec *executionContext) marshalOVisibility2ᚖgithubᚗcomᚋsavannahghiᚋfeedlibᚐVisibility(ctx context.Context, sel ast.SelectionSet, v *feedlib.Visibility) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return v
}

func (ec *executionContext) marshalO_Entity2githubᚗcomᚋ99designsᚋgqlgenᚋpluginᚋfederationᚋfedruntimeᚐEntity(ctx context.Context, sel ast.SelectionSet, v fedruntime.Entity) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.__Entity(ctx, sel, v)
}

func (ec *executionContext) marshalO__EnumValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.EnumValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__EnumValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐEnumValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Field2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐFieldᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Field) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Field2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐField(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__InputValue2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValueᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.InputValue) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__InputValue2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐInputValue(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Schema2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐSchema(ctx context.Context, sel ast.SelectionSet, v *introspection.Schema) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Schema(ctx, sel, v)
}

func (ec *executionContext) marshalO__Type2ᚕgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐTypeᚄ(ctx context.Context, sel ast.SelectionSet, v []introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	ret := make(graphql.Array, len(v))
	var wg sync.WaitGroup
	isLen1 := len(v) == 1
	if !isLen1 {
		wg.Add(len(v))
	}
	for i := range v {
		i := i
		fc := &graphql.FieldContext{
			Index:  &i,
			Result: &v[i],
		}
		ctx := graphql.WithFieldContext(ctx, fc)
		f := func(i int) {
			defer func() {
				if r := recover(); r != nil {
					ec.Error(ctx, ec.Recover(ctx, r))
					ret = nil
				}
			}()
			if !isLen1 {
				defer wg.Done()
			}
			ret[i] = ec.marshalN__Type2githubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx, sel, v[i])
		}
		if isLen1 {
			f(i)
		} else {
			go f(i)
		}

	}
	wg.Wait()
	return ret
}

func (ec *executionContext) marshalO__Type2ᚖgithubᚗcomᚋ99designsᚋgqlgenᚋgraphqlᚋintrospectionᚐType(ctx context.Context, sel ast.SelectionSet, v *introspection.Type) graphql.Marshaler {
	if v == nil {
		return graphql.Null
	}
	return ec.___Type(ctx, sel, v)
}

// endregion ***************************** type.gotpl *****************************
